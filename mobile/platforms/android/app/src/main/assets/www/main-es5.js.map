{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/angular-material.module.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/auth/admin.guard.ts","webpack:///src/app/auth/auth-interceptor.ts","webpack:///src/app/auth/auth-module.ts","webpack:///src/app/auth/auth.guard.ts","webpack:///src/app/auth/auth.service.ts","webpack:///src/app/auth/createModerator/createModerator.component.ts","webpack:///src/app/auth/createModerator/createModerator.component.html","webpack:///src/app/auth/login/login.component.ts","webpack:///src/app/auth/login/login.component.html","webpack:///src/app/auth/modifyPassword/modifyPassword.component.ts","webpack:///src/app/auth/modifyPassword/modifyPassword.component.html","webpack:///src/app/auth/signup/signup.component.ts","webpack:///src/app/auth/signup/signup.component.html","webpack:///src/app/auth/userList/user-list.component.ts","webpack:///src/app/auth/userList/user-list.component.html","webpack:///src/app/error-interceptor.ts","webpack:///src/app/error/error.component.ts","webpack:///src/app/error/error.component.html","webpack:///src/app/header/header.component.ts","webpack:///src/app/header/header.component.html","webpack:///src/app/helpers/filter.pipe.ts","webpack:///src/app/helpers/json-filter-by.pipe.ts","webpack:///src/app/posts/post-create/post-bid/post-bid.component.ts","webpack:///src/app/posts/post-create/post-bid/post-bid.component.html","webpack:///src/app/posts/post-create/post-buy/post-buy.component.ts","webpack:///src/app/posts/post-create/post-buy/post-buy.component.html","webpack:///src/app/posts/post-create/post-create/mime-type.validator.ts","webpack:///src/app/posts/post-create/post-create/post-create.component.ts","webpack:///src/app/posts/post-create/post-create/post-create.component.html","webpack:///src/app/posts/post-create/post-list-bought/post-list-bought.component.ts","webpack:///src/app/posts/post-create/post-list-bought/post-list-bought.component.html","webpack:///src/app/posts/post-create/post-list-buying/post-list-buying.component.ts","webpack:///src/app/posts/post-create/post-list-buying/post-list-buying.component.html","webpack:///src/app/posts/post-create/post-list-expired/post-list-expired.component.ts","webpack:///src/app/posts/post-create/post-list-expired/post-list-expired.component.html","webpack:///src/app/posts/post-create/post-list-selling/post-list-selling.component.ts","webpack:///src/app/posts/post-create/post-list-selling/post-list-selling.component.html","webpack:///src/app/posts/post-create/post-list-sold/post-list-sold.component.ts","webpack:///src/app/posts/post-create/post-list-sold/post-list-sold.component.html","webpack:///src/app/posts/post-create/post-list-won/post-list-won.component.ts","webpack:///src/app/posts/post-create/post-list-won/post-list-won.component.html","webpack:///src/app/posts/post-create/post-list/post-list.component.ts","webpack:///src/app/posts/post-create/post-list/post-list.component.html","webpack:///src/app/posts/post-create/post-messages/post-messages.component.ts","webpack:///src/app/posts/post-create/post-messages/post-messages.component.html","webpack:///src/app/posts/post-create/post.module.ts","webpack:///src/app/posts/post-create/post.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts","webpack:///ws (ignored)"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AngularMaterialModule","routes","path","redirectTo","pathMatch","component","canActivate","AppRoutingModule","forRoot","imports","providers","AppComponent","authService","autoAuthUser","selector","templateUrl","styleUrls","AppModule","provide","useClass","multi","declarations","bootstrap","entryComponents","AdminGuard","router","route","state","isAdmin","getIsAdmin","isVerified","getIsVerified","logout","navigate","skipLocationChange","AuthInterceptor","next","authToken","getToken","authRequest","clone","headers","set","handle","AuthModule","AuthGuard","isAuth","getIsAuth","BACKEND_URL","apiUrl","AuthService","http","users","usersUpdated","isAuthenticated","authStatusListener","token","asObservable","get","subscribe","response","usersCount","maxUsers","email","password","authData","admin","post","login","error","alert","put","userId","expiresInDuration","expiresIn","setAuthTimer","now","Date","expirationDate","getTime","saveAuthData","_","authInformation","getAuthData","JSON","parse","clearTimeout","tokenTimer","clearAuthData","duration","setTimeout","localStorage","setItem","toISOString","String","removeItem","getItem","postId","providedIn","CreateModeratorComponent","isLoading","authStatusSub","getAuthStatusListener","authStatus","unsubscribe","form","invalid","createModerator","value","LoginComponent","ModifyPasswordComponent","updatePassword","SignupComponent","createUser","UserListComponent","getAllUsers","authSub","getUsersUpdateListener","postData","deleteUser","ngOnInit","ErrorInterceptor","dialog","pipe","errorMessage","message","open","data","ErrorComponent","HeaderComponent","userIsAuthenticated","userIsAdmin","title","authListenerSubs","FilterPipe","items","searchText","fieldName","toLowerCase","filter","item","includes","name","FilterPipeNumberLow","FilterPipeNumberHigh","JsonFilterByPipe","json","args","jsonKey","returnObjects","forEach","filterObjectEntery","hasOwnProperty","indexOf","obj","PostBidComponent","postsService","finalAmount","amount","currentUser","getUserId","paramMap","has","getPost","_id","content","imagePath","creator","course","university","author","messages","startingPrice","minimumAllowedPrice","winner","date","bought","bidders","push","updateBid","reset","PostBuyComponent","addScript","paypalLoad","paypalConfig","env","client","sandbox","commit","payment","actions","create","transactions","total","currency","onAuthorize","execute","onClick","onBuy","addPaypalScript","paypal","Button","render","reject","scriptTagElement","document","createElement","src","onload","body","appendChild","buyProduct","mimeType","control","file","fileReader","FileReader","frObs","observer","addEventListener","arr","Uint8Array","result","subarray","header","isValid","i","length","toString","invalidMimeType","complete","readAsArrayBuffer","PostCreateComponent","mode","validators","required","minLength","image","asyncValidators","setValue","event","target","files","patchValue","updateValueAndValidity","reader","imagePreview","readAsDataURL","window","addPost","updatePost","PostListBoughtComponent","posts","totalPosts","postsPerPage","currentPage","pageSizeOption","today","setInterval","getPostsBought","postsSub","getPostUpdateListener","postCount","pageData","pageIndex","pageSize","PostListBuyingComponent","getPostsBiding","PostListExpiredComponent","getPostsExpired","PostListSellingComponent","socket","api","getPostsSelling","once","PostListSoldComponent","getPostsSold","PostListWonComponent","getPostsWon","PostListComponent","searchTitle","undefined","searchAuthor","searchCourse","searchUniversity","searchMinimumPrice","searchMaximumPrice","getPosts","deletePost","PostMessagesComponent","isChecked","replies","$event","index","addedReply","updatePostMessage","addedMessage","PostsModule","PostsService","postsUpdated","minPrice","maxPrice","queryParams","map","maxPosts","transformedPosts","FormData","append","stringify","responseData","titleUpdated","contentUpdated","imageUpdated","courseUpdated","universityUpdated","authorUpdated","environment","production","err","console"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatExpansionModule } from '@angular/material/expansion'\nimport { MatPaginatorModule } from '@angular/material/paginator'\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatSidenavModule } from '@angular/material/sidenav'\n\n@NgModule({\nexports: [\n  MatInputModule,\n  MatCardModule,\n  MatButtonModule,\n  MatToolbarModule,\n  MatExpansionModule,\n  MatProgressSpinnerModule,\n  MatPaginatorModule,\n  MatDialogModule,\n  MatDatepickerModule,\n  MatCheckboxModule,\n  MatDividerModule,\n  MatSidenavModule\n]\n})\n\nexport class AngularMaterialModule {}\n\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { PostListComponent } from './posts/post-create/post-list/post-list.component';\nimport { PostListSellingComponent } from './posts/post-create/post-list-selling/post-list-selling.component';\nimport { PostListBuyingComponent } from './posts/post-create/post-list-buying/post-list-buying.component';\nimport { PostListExpiredComponent } from './posts/post-create/post-list-expired/post-list-expired.component';\nimport { PostCreateComponent } from './posts/post-create/post-create/post-create.component';\nimport { LoginComponent } from './auth/login/login.component';\nimport { SignupComponent } from './auth/signup/signup.component';\nimport { PostMessagesComponent } from './posts/post-create/post-messages/post-messages.component';\nimport { PostBidComponent } from './posts/post-create/post-bid/post-bid.component';\nimport { CreateModeratorComponent } from './auth/createModerator/createModerator.component';\nimport { AuthGuard } from './auth/auth.guard';\nimport { AdminGuard } from './auth/admin.guard';\nimport { ModifyPasswordComponent } from './auth/modifyPassword/modifyPassword.component';\nimport { PostListWonComponent } from './posts/post-create/post-list-won/post-list-won.component';\nimport { PostBuyComponent } from './posts/post-create/post-buy/post-buy.component';\nimport { PostListBoughtComponent } from './posts/post-create/post-list-bought/post-list-bought.component';\nimport { PostListSoldComponent } from './posts/post-create/post-list-sold/post-list-sold.component'\nimport { UserListComponent} from './auth/userList/user-list.component';\n\n\n\nconst routes: Routes = [\n  {\n    path: '', redirectTo: 'postList', pathMatch: 'full'\n  },\n  {\n    path: 'postList', component: PostListComponent\n  },\n  {\n    path: 'userList', component: UserListComponent, canActivate: [AdminGuard]\n  },\n  {\n    path: 'postListSelling', component: PostListSellingComponent, canActivate: [AuthGuard]\n  },\n  {\n    path: 'postListBuying', component: PostListBuyingComponent, canActivate: [AuthGuard]\n  },\n  {\n    path: 'postListWon', component: PostListWonComponent, canActivate: [AuthGuard]\n  },\n  {\n    path: 'createPost', component: PostCreateComponent, canActivate: [AuthGuard]\n  },\n  {\n    path: 'postListExpired', component: PostListExpiredComponent, canActivate: [AdminGuard]\n  },\n  {\n    path: 'postListSold', component: PostListSoldComponent, canActivate: [AdminGuard]\n  },\n  {\n    path: 'postListBought', component: PostListBoughtComponent, canActivate: [AuthGuard]\n  },\n  {\n    path: 'edit/:postId', component: PostCreateComponent, canActivate: [AdminGuard]\n  },\n  {\n    path: 'login', component: LoginComponent\n  },\n  {\n    path: 'signup', component: SignupComponent\n  },\n  {\n    path: 'createModerator', component: CreateModeratorComponent, canActivate: [AdminGuard]\n  },\n  {\n    path: 'modifyPassword', component: ModifyPasswordComponent\n  },\n  {\n    path: 'message/:postId', component: PostMessagesComponent, canActivate: [AuthGuard]\n  },\n  {\n    path: 'bid/:postId', component: PostBidComponent, canActivate: [AuthGuard]\n  },\n  {\n    path: 'buy/:postId', component: PostBuyComponent, canActivate: [AuthGuard]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n  providers: [AuthGuard, AdminGuard]\n})\n\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from './auth/auth.service';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  constructor(private authService: AuthService) {}\n  ngOnInit() {\n    this.authService.autoAuthUser();\n  }\n}\n","<app-header></app-header>\n<main>\n  <script src=\"https://www.paypal.com/sdk/js?client-id=AZILAWi_q3OkRNvJv7UNMe_VVYkEn-aet3eC21Mdn4asXxNxQzwL9mSPpEZWS3QbPDBQobxsnW26fKGE\"></script>\n  <router-outlet> </router-outlet>\n</main>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from \"@angular/common/http\";\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\n//created\nimport { HeaderComponent } from './header/header.component';\nimport { AuthInterceptor } from './auth/auth-interceptor';\nimport { ErrorInterceptor } from './error-interceptor';\nimport { ErrorComponent } from './error/error.component';\nimport { AngularMaterialModule } from './angular-material.module';\nimport { PostsModule } from './posts/post-create/post.module';\nimport { AuthModule } from './auth/auth-module';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n    ErrorComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    PostsModule,\n    AngularMaterialModule,\n    AuthModule,\n    FlexLayoutModule\n\n  ],\n  providers: [\n    {provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true},\n    {provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true}\n  ],\n  bootstrap: [AppComponent],\n  entryComponents: [ErrorComponent]\n})\nexport class AppModule { }\n","import { CanActivate, Router } from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { AuthService } from './auth.service';;\n\n@Injectable()\nexport class AdminGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n  canActivate(route: import(\"@angular/router\").ActivatedRouteSnapshot, state: import(\"@angular/router\").RouterStateSnapshot): boolean | import(\"@angular/router\").UrlTree | import(\"rxjs\").Observable<boolean | import(\"@angular/router\").UrlTree> | Promise<boolean | import(\"@angular/router\").UrlTree> {\n    const isAdmin = this.authService.getIsAdmin();\n    const isVerified = this.authService.getIsVerified();\n    if(!isAdmin || !isVerified) {\n      this.authService.logout();\n      this.router.navigate(['/login'], {skipLocationChange: true});\n    }\n    return isAdmin;\n  }\n\n}\n","import { HttpInterceptor, HttpRequest, HttpHandler } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private authService: AuthService) {}\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\n    const authToken = this.authService.getToken();\n    const authRequest = req.clone({\n      headers: req.headers.set(\"Authorization\", \"Bearer \" + authToken)\n    });\n    return next.handle(authRequest);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { AngularMaterialModule } from 'src/app/angular-material.module';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { SignupComponent } from './signup/signup.component';\nimport { CreateModeratorComponent } from './createModerator/createModerator.component';\nimport { ModifyPasswordComponent } from './modifyPassword/modifyPassword.component';\nimport { UserListComponent } from './userList/user-list.component';\nimport { FormsModule } from '@angular/forms'\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    SignupComponent,\n    CreateModeratorComponent,\n    ModifyPasswordComponent,\n    UserListComponent\n  ],\n  imports: [\n    CommonModule,\n    AngularMaterialModule,\n    RouterModule,\n    FormsModule\n  ]\n})\nexport class AuthModule {}\n","import { CanActivate, Router } from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { AuthService } from './auth.service';;\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n  canActivate(route: import(\"@angular/router\").ActivatedRouteSnapshot, state: import(\"@angular/router\").RouterStateSnapshot): boolean | import(\"@angular/router\").UrlTree | import(\"rxjs\").Observable<boolean | import(\"@angular/router\").UrlTree> | Promise<boolean | import(\"@angular/router\").UrlTree> {\n    const isAuth = this.authService.getIsAuth();\n    if(!isAuth) {\n      this.router.navigate(['/login'], {skipLocationChange: true});\n    }\n    return isAuth;\n  }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Router } from \"@angular/router\";\nimport { Subject } from \"rxjs\";\nimport { AuthData } from \"./auth-data.model\";\n\nimport { environment } from \"../../environments/environment\";\n\n\nconst BACKEND_URL = environment.apiUrl + \"/user\";\n\n@Injectable({ providedIn: \"root\" })\nexport class AuthService {\n  private users: AuthData[] = [];\n  private usersUpdated = new Subject<{users: AuthData[], usersCount: number}>();\n  private isAuthenticated = false;\n  private token: string;\n  private tokenTimer: any;\n  private authStatusListener = new Subject<boolean>();\n  private userId: string;\n  private isAdmin: boolean;\n  private isVerified: boolean;\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  getToken() {\n    return this.token;\n  }\n\n  getIsAuth() {\n    return this.isAuthenticated;\n  }\n\n  getAuthStatusListener() {\n    return this.authStatusListener.asObservable();\n  }\n\n  getIsAdmin() {\n    return this.isAdmin;\n  }\n\n  getIsVerified() {\n    return this.isVerified;\n  }\n\n  getAllUsers() {\n    this.http\n    .get<{message: string, users: any, maxUsers: number}>(\n      BACKEND_URL)\n    .subscribe( response => {\n      this.users = response.users;\n      this.usersUpdated.next({users: [...this.users], usersCount: response.maxUsers})\n    })\n  }\n\n  getUsersUpdateListener() {\n    return this.usersUpdated.asObservable();\n  }\n\n  createUser(email: string, password: string) {\n    const authData: AuthData = { email: email, password: password, admin: false, isVerified: true };\n    this.http\n      .post( BACKEND_URL + \"/signup\", authData)\n      .subscribe(response => {\n        this.login(authData.email, authData.password);\n      }, error => {\n        this.authStatusListener.next(false);\n      }\n      );\n\n  }\n\n  createModerator(email: string, password: string) {\n    const authData: AuthData = { email: email, password: password, admin: true, isVerified: false};\n    this.http\n      .post( BACKEND_URL + \"/createModerator\", authData)\n      .subscribe(response => {\n        this.router.navigate([\"/postList\"], {skipLocationChange: true});\n        alert(\"Moderator created! \\n\" + \"Email: \" + email + \"\\nPassword: \" + password);\n      }, error => {\n        this.authStatusListener.next(false);\n      });\n  }\n\n  updatePassword(email: string, password: string) {\n    const authData: AuthData = { email: email, password: password, admin: true, isVerified: true};\n    this.http\n    .put( BACKEND_URL + \"/modifyPassword/\" + this.userId, authData)\n    .subscribe(response => {\n      this.isVerified = true;\n      this.router.navigate([\"/postList\"], {skipLocationChange: true});\n      alert(\"Password changed!\");\n    }, error => {\n      this.logout();\n    });\n\n  }\n\n  login(email: string, password: string) {\n    const authData: AuthData = { email: email, password: password, admin: false, isVerified: false };\n    this.http\n      .post<{ token: string; expiresIn: number, userId: string, admin: boolean, isVerified: boolean}>(\n        BACKEND_URL + \"/login\",\n        authData\n      )\n      .subscribe(response => {\n        const token = response.token;\n        this.token = token;\n        if (token) {\n          const expiresInDuration = response.expiresIn;\n          this.setAuthTimer(expiresInDuration);\n          this.isAuthenticated = true;\n          this.userId = response.userId;\n          this.isAdmin = response.admin;\n          this.isVerified = response.isVerified;\n          this.authStatusListener.next(true);\n          const now = new Date();\n          const expirationDate = new Date(now.getTime() + expiresInDuration * 1000);\n          this.saveAuthData(token, expirationDate, this.userId, this.isAdmin, this.isVerified);\n          if(this.isVerified) this.router.navigate([\"/postList\"], {skipLocationChange: true}); else\n          this.router.navigate([\"/modifyPassword\"]);\n        }\n      }, _ => {\n        this.authStatusListener.next(false);}\n        );\n  }\n\n  autoAuthUser() {\n    const authInformation = this.getAuthData();\n    if (!authInformation) {\n      this.router.navigate(['/postList'], {skipLocationChange: true});\n      return;\n    }\n    const now = new Date();\n    const expiresIn = authInformation.expirationDate.getTime() - now.getTime();\n    if (expiresIn > 0) {\n      this.token = authInformation.token;\n      this.isAuthenticated = true;\n      this.userId = authInformation.userId;\n      this.isAdmin = JSON.parse(authInformation.isAdmin);\n      this.isVerified = JSON.parse(authInformation.isVerified);\n      this.setAuthTimer(expiresIn / 1000);\n      this.router.navigate(['/postList'], {skipLocationChange: true});\n      this.authStatusListener.next(true);\n    }\n  }\n\n  logout() {\n    this.token = null;\n    this.isAuthenticated = false;\n    this.isAdmin = false;\n    this.isVerified = false;\n    this.authStatusListener.next(false);\n    this.userId = null;\n    clearTimeout(this.tokenTimer);\n    this.clearAuthData();\n    this.router.navigate([\"/login\"], {skipLocationChange: true});\n  }\n\n  private setAuthTimer(duration: number) {\n    this.tokenTimer = setTimeout(() => {\n      this.logout();\n    }, duration * 1000);\n  }\n\n  private saveAuthData(token: string, expirationDate: Date, userId: string, isAdmin: boolean, isVerified: boolean) {\n    localStorage.setItem(\"token\", token);\n    localStorage.setItem(\"expiration\", expirationDate.toISOString());\n    localStorage.setItem(\"userId\", userId);\n    localStorage.setItem(\"isAdmin\", String(isAdmin));\n    localStorage.setItem(\"isVerified\", String(isVerified))\n\n  }\n\n  private clearAuthData() {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"expiration\");\n    localStorage.removeItem(\"userId\");\n    localStorage.removeItem(\"isAdmin\");\n    localStorage.removeItem(\"isVerified\");\n  }\n\n  private getAuthData() {\n    const token = localStorage.getItem(\"token\");\n    const expirationDate = localStorage.getItem(\"expiration\");\n    const userId = localStorage.getItem(\"userId\");\n    const isAdmin = localStorage.getItem(\"isAdmin\");\n    const isVerified = localStorage.getItem(\"isVerified\");\n    if (!token || !expirationDate) {\n      return;\n    }\n    return {\n      token: token,\n      expirationDate: new Date(expirationDate),\n      userId: userId,\n      isAdmin: isAdmin,\n      isVerified: isVerified\n    }\n  }\n\n  getUserId() {\n    return this.userId;\n  }\n\n  deleteUser(postId: string) {\n    return this.http.delete(BACKEND_URL + \"/\" + postId)\n  }\n\n}\n","import { Component, OnInit, OnDestroy } from \"@angular/core\";\nimport { NgForm } from \"@angular/forms\";\nimport { AuthService } from '../auth.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  styleUrls: ['./createModerator.component.css'],\n  templateUrl: './createModerator.component.html'\n})\n\nexport class CreateModeratorComponent implements OnInit, OnDestroy {\n\n  isLoading = false;\n  private authStatusSub: Subscription;\n\n  constructor(public authService: AuthService) {}\n\n  ngOnInit() {\n    this.authStatusSub = this.authService.getAuthStatusListener().subscribe(\n      authStatus => {\n        this.isLoading = false;\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    this.authStatusSub.unsubscribe();\n  }\n  onSignup(form: NgForm) {\n    if (form.invalid) { return; }\n    this.isLoading = true;\n    this.authService.createModerator(form.value.email ,form.value.password)\n  }\n}\n","<mat-card class=\"flex\">\n  <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n    <form  (submit)=\"onSignup(signupForm)\" #signupForm=\"ngForm\" *ngIf=\"!isLoading\">\n      <mat-form-field>\n        <input matInput name=\"email\" ngModel type = \"email\" placeholder= \"E-mail\" #emailInput=\"ngModel\" required email>\n        <mat-error *ngIf=\"emailInput.invalid\">Please enter a valid email.</mat-error>\n      </mat-form-field>\n      <br>\n      <mat-form-field>\n        <input type=\"password\" name=\"password\" ngModel matInput placeholder=\"Password\" #passwordInput=\"ngModel\" required >\n        <mat-error *ngIf=\"passwordInput.invalid\">Please enter a valid password.</mat-error>\n      </mat-form-field>\n    <br>\n    <button\n      *ngIf=\"!isLoading\"\n      mat-raised-button\n      color = \"primary\"\n      type=\"submit\">Add Moderator\n    </button>\n    <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n    </form>\n\n</mat-card>\n","import { Component, OnInit, OnDestroy } from \"@angular/core\";\nimport { NgForm } from \"@angular/forms\";\nimport { AuthService } from \"../auth.service\";\nimport { Subscription } from 'rxjs';\n\n@Component({\n  styleUrls: ['./login.component.css'],\n  templateUrl: './login.component.html'\n})\n\nexport class LoginComponent implements OnInit, OnDestroy {\n\n\n  isLoading = false;\n  private authStatusSub: Subscription;\n\n  constructor(public authService: AuthService) {}\n\n  ngOnInit() {\n    this.authStatusSub = this.authService.getAuthStatusListener().subscribe(\n      authStatus => {\n        this.isLoading = false;\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    this.authStatusSub.unsubscribe();\n  }\n\n  onLogin(form: NgForm) {\n    if(form.invalid) { return; }\n    this.isLoading = true;\n    this.authService.login(form.value.email, form.value.password);\n  }\n}\n","<mat-card class=\"flex\">\n  <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n    <form (submit)=\"onLogin(loginForm)\" #loginForm=\"ngForm\" *ngIf=\"!isLoading\">\n      <mat-form-field>\n        <input matInput name=\"email\" ngModel type = \"email\" placeholder= \"E-mail\" #emailInput=\"ngModel\" required email>\n        <mat-error *ngIf=\"emailInput.invalid\">Please enter a valid email.</mat-error>\n      </mat-form-field>\n      <br>\n      <mat-form-field>\n        <input type=\"password\" name=\"password\" ngModel matInput placeholder=\"Password\" #passwordInput=\"ngModel\" required >\n        <mat-error *ngIf=\"passwordInput.invalid\">Please enter a valid password.</mat-error>\n      </mat-form-field>\n    <br>\n    <button\n    *ngIf=\"!isLoading\"\n      mat-raised-button\n      color = \"primary\"\n      type=\"submit\">Login\n    </button>\n    <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n    </form>\n</mat-card>\n","import { Component, OnInit, OnDestroy } from \"@angular/core\";\nimport { NgForm } from \"@angular/forms\";\nimport { AuthService } from '../auth.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  styleUrls: ['./modifyPassword.component.css'],\n  templateUrl: './modifyPassword.component.html'\n})\n\nexport class ModifyPasswordComponent implements OnInit, OnDestroy {\n\n  isLoading = false;\n  private authStatusSub: Subscription;\n\n  constructor(public authService: AuthService) {}\n\n  ngOnInit() {\n    this.authStatusSub = this.authService.getAuthStatusListener().subscribe(\n      authStatus => {\n        this.isLoading = false;\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    this.authStatusSub.unsubscribe();\n  }\n  onSignup(form: NgForm) {\n    if (form.invalid) { return; }\n    this.isLoading = true;\n    this.authService.updatePassword(form.value.email ,form.value.password)\n  }\n}\n","<mat-card class=\"flex\">\n  <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n    <form  (submit)=\"onSignup(signupForm)\" #signupForm=\"ngForm\" *ngIf=\"!isLoading\">\n      <mat-form-field>\n        <input matInput name=\"email\" ngModel type = \"email\" placeholder= \"E-mail\" #emailInput=\"ngModel\" required email>\n        <mat-error *ngIf=\"emailInput.invalid\">Please enter a valid email.</mat-error>\n      </mat-form-field>\n      <br>\n      <mat-form-field>\n        <input type=\"password\" name=\"password\" ngModel matInput placeholder=\"Password\" #passwordInput=\"ngModel\" required >\n        <mat-error *ngIf=\"passwordInput.invalid\">Please enter a valid password.</mat-error>\n      </mat-form-field>\n    <br>\n    <button\n      *ngIf=\"!isLoading\"\n      mat-raised-button\n      color = \"primary\"\n      type=\"submit\">Modify Passowrd!\n    </button>\n    <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n    </form>\n\n</mat-card>\n","import { Component, OnInit, OnDestroy } from \"@angular/core\";\nimport { NgForm } from \"@angular/forms\";\nimport { AuthService } from '../auth.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  styleUrls: ['./signup.component.css'],\n  templateUrl: './signup.component.html'\n})\n\nexport class SignupComponent implements OnInit, OnDestroy {\n\n  isLoading = false;\n  private authStatusSub: Subscription;\n\n  constructor(public authService: AuthService) {}\n\n  ngOnInit() {\n    this.authStatusSub = this.authService.getAuthStatusListener().subscribe(\n      authStatus => {\n        this.isLoading = false;\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    this.authStatusSub.unsubscribe();\n  }\n  onSignup(form: NgForm) {\n    if (form.invalid) { return; }\n    this.isLoading = true;\n    this.authService.createUser(form.value.email ,form.value.password)\n  }\n}\n","<mat-card class=\"flex\">\n  <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n    <form  (submit)=\"onSignup(signupForm)\" #signupForm=\"ngForm\" *ngIf=\"!isLoading\">\n      <mat-form-field>\n        <input matInput name=\"email\" ngModel type = \"email\" placeholder= \"E-mail\" #emailInput=\"ngModel\" required email>\n        <mat-error *ngIf=\"emailInput.invalid\">Please enter a valid email.</mat-error>\n      </mat-form-field>\n      <br>\n      <mat-form-field>\n        <input type=\"password\" name=\"password\" ngModel matInput placeholder=\"Password\" #passwordInput=\"ngModel\" required >\n        <mat-error *ngIf=\"passwordInput.invalid\">Please enter a valid password.</mat-error>\n      </mat-form-field>\n    <br>\n    <button\n      *ngIf=\"!isLoading\"\n      mat-raised-button\n      color = \"primary\"\n      type=\"submit\">Register\n    </button>\n    <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n    </form>\n\n</mat-card>\n","import {Component, OnInit, OnDestroy} from '@angular/core';\nimport { AuthData } from '../auth-data.model'\nimport { Subscription } from 'rxjs';\nimport { AuthService } from '../auth.service';\n\n@Component({\n  selector: 'app-post-list',\n  templateUrl: './user-list.component.html',\n  styleUrls: ['./user-list.component.css']\n})\n\nexport class UserListComponent implements OnInit {\n  users: AuthData[] = [];\n  private authSub: Subscription;\n\n  constructor(private authService: AuthService) {}\n\n  ngOnInit() {\n    this.authService.getAllUsers();\n    this.authSub = this.authService.getUsersUpdateListener()\n    .subscribe(\n      (postData: {users: AuthData[], usersCount: number}) =>  {\n        this.users = postData.users;\n      }\n    );\n  }\n\n  onDelete(email: string) {\n    this.authService.deleteUser(email).subscribe( () => {\n      this.ngOnInit()\n    });\n  }\n\n}\n","<mat-accordion multi=\"true\">\n  <mat-expansion-panel *ngFor=\"let user of users\">\n    <mat-expansion-panel-header>\n      <mat-panel-title>\n        {{user.email}}\n      </mat-panel-title>\n    </mat-expansion-panel-header>\n    <mat-panel-description>\n    <mat-action-row>\n      <button mat-button color = \"warn\" (click) = \"onDelete(user.email)\"> DELETE </button>\n    </mat-action-row>\n  </mat-panel-description>\n  </mat-expansion-panel>\n</mat-accordion>\n\n","import { HttpInterceptor, HttpRequest, HttpHandler, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ErrorComponent } from './error/error.component';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n  constructor(private dialog: MatDialog) {}\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\n\n    return next.handle(req).pipe(\n      catchError((error: HttpErrorResponse) => {\n        let errorMessage = \"An uknown error ocurred!\"\n        if(error.error.message) {\n          errorMessage = error.error.message;\n        }\n        this.dialog.open(ErrorComponent, {data: {message: errorMessage}});\n        return throwError(error);\n      })\n    );\n  }\n\n}\n","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  templateUrl: './error.component.html'\n})\nexport class ErrorComponent {\n  constructor(@Inject(MAT_DIALOG_DATA) public data: {message: string}) {}\n}\n","<h1 mat-mat-dialog-title>An Error Occured!</h1>\n<div mat-dialog-content>\n<p class=\"mat-body-1\"> {{data.message}}</p>\n</div>\n<div mat-dialog-actions>\n  <button mat-button mat-dialog-close>Okay</button>\n</div>\n","import {Component, OnInit, OnDestroy} from '@angular/core';\nimport { AuthService } from '../auth/auth.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css' ]\n})\n\nexport class HeaderComponent implements OnInit, OnDestroy {\n\n  constructor(private authService: AuthService) { }\n\n  userIsAuthenticated = false;\n  userIsAdmin = false;\n  private authListenerSubs: Subscription;\n  title = \"Books List\"\n\n  ngOnInit() {\n    this.userIsAuthenticated = this.authService.getIsAuth();\n    this.userIsAdmin = this.authService.getIsAdmin();\n    this.authListenerSubs = this.authService.getAuthStatusListener().subscribe(isAuthenticated => {\n      this.userIsAuthenticated = isAuthenticated;\n      this.userIsAdmin = this.authService.getIsAdmin();\n    });\n  }\n\n  ngOnDestroy() {\n    this.authListenerSubs.unsubscribe();\n  }\n\n  onLogout() {\n    this.authService.logout();\n  }\n\n}\n","<mat-toolbar color=\"primary\">\n  <span><a routerLink=\"/postList\">{{title}}</a></span>\n  <span fxFlex></span>\n    <ul>\n      <li *ngIf=\"userIsAdmin\">\n        <a mat-button routerLink=\"/createModerator\" routerLinkActive=\"mat-accent\">Add Moderator</a>\n      </li>\n      <li *ngIf=\"userIsAdmin\">\n        <a mat-button routerLink=\"/postListExpired\" routerLinkActive=\"mat-accent\">Expired Post</a>\n      </li>\n      <li *ngIf=\"userIsAdmin\">\n        <a mat-button routerLink=\"/postListSold\" routerLinkActive=\"mat-accent\">Sold Post</a>\n      </li>\n      <li *ngIf=\"userIsAdmin\">\n        <a mat-button routerLink=\"/userList\" routerLinkActive=\"mat-accent\">User List</a>\n      </li>\n      <li *ngIf=\"userIsAuthenticated && !userIsAdmin\">\n        <a mat-button routerLink=\"/postListSelling\" routerLinkActive=\"mat-accent\">My posts</a>\n      </li>\n      <li *ngIf=\"userIsAuthenticated && !userIsAdmin\">\n        <a mat-button routerLink=\"/postListBuying\" routerLinkActive=\"mat-accent\">My bids</a>\n      </li>\n      <li *ngIf=\"userIsAuthenticated && !userIsAdmin\">\n        <a mat-button routerLink=\"/postListWon\" routerLinkActive=\"mat-accent\">My won bids</a>\n      </li>\n      <li *ngIf=\"userIsAuthenticated && !userIsAdmin\">\n        <a mat-button routerLink=\"/postListBought\" routerLinkActive=\"mat-accent\">Bought Products</a>\n      </li>\n      <li *ngIf=\"userIsAuthenticated && !userIsAdmin\">\n        <a mat-button routerLink=\"/createPost\" routerLinkActive=\"mat-accent\">New post</a>\n      </li>\n      <li *ngIf=\"!userIsAuthenticated\">\n        <a mat-button routerLink=\"/login\" routerLinkActive=\"mat-accent\">Login</a>\n      </li>\n      <li *ngIf=\"!userIsAuthenticated\">\n        <a mat-button routerLink=\"/signup\" routerLinkActive=\"mat-accent\">Signup</a>\n      </li>\n      <li *ngIf=\"userIsAuthenticated\">\n        <button mat-button (click)=\"onLogout()\">Logout</button>\n      </li>\n    </ul>\n</mat-toolbar>\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'filter'\n})\nexport class FilterPipe implements PipeTransform {\n\n  transform(items: any[], searchText: string, fieldName: string): any[] {\n\n    if (!items) { return []; }\n\n    if (!searchText) { return items; }\n\n    searchText = searchText.toLowerCase();\n\n    return items.filter(item => {\n      if (item && item[fieldName]) {\n        return item[fieldName].toLowerCase().includes(searchText);\n      }\n      return false;\n    });\n   }\n\n}\n\n\n@Pipe({\n  name: 'filterNumberLow'\n})\nexport class FilterPipeNumberLow implements PipeTransform {\n\n  transform(items: any[], searchText: number, fieldName: string): any[] {\n\n    if (!items) { return []; }\n\n    if (!searchText) { return items; }\n\n    return items.filter(item => {\n      if (item && item[fieldName] >= searchText ) {\n        return item[fieldName];\n      }\n      return false;\n    });\n   }\n\n}\n\n@Pipe({\n  name: 'filterNumberHigh'\n})\nexport class FilterPipeNumberHigh implements PipeTransform {\n\n  transform(items: any[], searchText: number, fieldName: string): any[] {\n\n    if (!items) { return []; }\n\n    if (!searchText) { return items; }\n\n    return items.filter(item => {\n      if (item && item[fieldName] <= searchText ) {\n        return item[fieldName];\n      }\n      return false;\n    });\n   }\n\n}\n","import { Pipe, PipeTransform, Injectable } from '@angular/core';\n\n@Pipe({ name: 'jsonFilterBy' })\n@Injectable()\nexport class JsonFilterByPipe implements PipeTransform {\n\n  transform(json: any[], args: any[]) : any[] {\n    var searchText = args[0];\n    var jsonKey = args[1];\n\n    if(searchText == null || searchText == 'undefined') return json;\n    if(jsonKey    == null || jsonKey    == 'undefined') return json;\n\n    var returnObjects = json;\n    json.forEach( function ( filterObjectEntery ) {\n\n      if( filterObjectEntery.hasOwnProperty( jsonKey ) ) {\n\n        if ( typeof filterObjectEntery[jsonKey] != \"undefined\" &&\n        filterObjectEntery[jsonKey].toLowerCase().indexOf(searchText.toLowerCase()) > -1 ) {\n        } else {\n            returnObjects = returnObjects.filter(obj => obj !== filterObjectEntery);\n        }\n      } else {\n      }\n\n    })\n    return returnObjects;\n  }\n}\n","import {Component, OnInit, AfterViewChecked} from '@angular/core';\nimport { Post } from '../post.model';\nimport { PostsService } from '../post.service';\nimport { ActivatedRoute, ParamMap } from '@angular/router';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { AuthService } from 'src/app/auth/auth.service';\n\ndeclare let paypal: any;\n\n@Component({\n  templateUrl: './post-bid.component.html',\n  styleUrls: ['./post-bid.component.css']\n})\nexport class PostBidComponent implements OnInit {\n\n  constructor(public postsService: PostsService, public authService: AuthService, public route: ActivatedRoute) {}\n  private postId: string;\n  public post: Post;\n  public isLoading = false;\n  form: FormGroup;\n  finalAmount: number = 1;\n  currentUser: string;\n\n  ngOnInit() {\n    this.form = new FormGroup({\n      amount: new FormControl(null)\n    });\n    this.currentUser = this.authService.getUserId();\n    this.route.paramMap.subscribe( (paramMap: ParamMap) => {\n      if(paramMap.has('postId')) {\n        this.postId = paramMap.get('postId');\n        this.isLoading = true;\n        this.postsService.getPost(this.postId).subscribe(postData => {\n          this.isLoading = false;\n          this.post = {\n            id: postData._id,\n            title: postData.title,\n            content: postData.content,\n            imagePath: postData.imagePath,\n            creator: postData.creator,\n            course: postData.course,\n            university: postData.university,\n            author: postData.author,\n            messages: postData.messages,\n            startingPrice: postData.startingPrice,\n            minimumAllowedPrice: postData.minimumAllowedPrice,\n            winner: postData.winner,\n            date: postData.date,\n            bought: postData.bought,\n            bidders: postData.bidders\n          };\n          this.finalAmount = postData.startingPrice;\n        });\n      }\n    });\n  }\n\n  onPostBid() {\n    if(this.form.invalid || this.form.value.amount <= this.finalAmount) {\n      alert(\"Ammount should be bigger than current price!\");\n      return;\n    }\n    this.post.winner = this.authService.getUserId();\n    this.post.startingPrice = this.form.value.amount;\n\n    if(!this.post.bidders.includes(this.authService.getUserId())) {this.post.bidders.push(this.authService.getUserId());}\n    this.postsService.updateBid(\n      this.post.id,\n      this.post.title,\n      this.post.content,\n      this.post.imagePath,\n      this.post.course,\n      this.post.university,\n      this.post.author,\n      this.post.messages,\n      this.post.startingPrice,\n      this.post.minimumAllowedPrice,\n      this.post.winner,\n      this.post.date,\n      this.post.bidders\n    );\n    this.finalAmount = this.post.startingPrice;\n    this.form.reset();\n  }\n}\n","<mat-card>\n  <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n  <mat-card-content *ngIf=\"!isLoading\">\n    <mat-card-title *ngIf=\"currentUser == post.winner\">You are currently winning this product!</mat-card-title>\n    Title: {{post.title}} <br>\n    Author: {{post.author}} <br>\n    Course: {{post.course}} <br>\n    University: {{post.university}} <br>\n    Content: {{post.content}} <br>\n    Price: {{post.startingPrice}}$ <br>\n    <img height=\"100\" width=\"100\" src={{post.imagePath}}>\n  </mat-card-content>\n  <h1 *ngIf=\"!isLoading\" align=\"center\">Bid </h1>\n  <form *ngIf=\"!isLoading\" [formGroup]=\"form\" (submit) = \"onPostBid()\">\n    <h4> Ammount should be bigger than the current price! </h4>\n    <mat-form-field>\n      <input\n      matInput type = \"number\"\n      formControlName = \"amount\"\n      placeholder= {{post.startingPrice+1}}>\n    </mat-form-field>\n    <br>\n    <button\n      mat-raised-button\n      color = \"primary\"\n      type=\"submit\"> Post Bid</button>\n      </form>\n</mat-card>\n\n\n\n","import {Component, OnInit, AfterViewChecked} from '@angular/core';\nimport { Post } from '../post.model';\nimport { PostsService } from '../post.service';\nimport { ActivatedRoute, ParamMap } from '@angular/router';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { AuthService } from 'src/app/auth/auth.service';\n\ndeclare let paypal: any;\n\n@Component({\n  templateUrl: './post-buy.component.html',\n  styleUrls: ['./post-buy.component.css']\n})\nexport class PostBuyComponent implements OnInit, AfterViewChecked {\n\n  constructor(public postsService: PostsService, public authService: AuthService, public route: ActivatedRoute) {}\n  private postId: string;\n  public post: Post;\n  public isLoading = false;\n  form: FormGroup;\n  addScript: boolean = false;\n  paypalLoad: boolean = false;\n  finalAmount: number = 1;\n  currentUser: string;\n  paypalConfig = {\n    env: 'sandbox',\n    client: {\n      sandbox: 'AZILAWi_q3OkRNvJv7UNMe_VVYkEn-aet3eC21Mdn4asXxNxQzwL9mSPpEZWS3QbPDBQobxsnW26fKGE'\n    },\n    commit: true,\n    payment: (data, actions) => {\n      return actions.payment.create({\n        payment: {\n          transactions: [\n            {amount: { total: this.finalAmount, currency: 'EUR'}}\n          ]\n        }\n      })\n    },\n    onAuthorize: (data, actions) => {\n      return actions.payment.execute().then((payment) => {\n      });\n  },\n  onClick: () => {\n    this.onBuy();\n  }\n}\n\nngAfterViewChecked(): void {\n  if(!this.addScript) {\n    this.addPaypalScript().then(() => {\n      paypal.Button.render(this.paypalConfig, '#paypal-checkout-btn');\n      this.paypalLoad = false;\n    })\n  }\n}\n\naddPaypalScript() {\n  this.addScript = true;\n  return new Promise((resolve, reject) => {\n    let scriptTagElement = document.createElement('script');\n    scriptTagElement.src = \"https://www.paypalobjects.com/api/checkout.js\"\n    scriptTagElement.onload = resolve;\n    document.body.appendChild(scriptTagElement);\n  })\n}\n\n\n  ngOnInit() {\n    this.paypalLoad = true;\n    this.addScript = false;\n    this.currentUser = this.authService.getUserId();\n    this.route.paramMap.subscribe( (paramMap: ParamMap) => {\n      if(paramMap.has('postId')) {\n        this.postId = paramMap.get('postId');\n        this.isLoading = true;\n        this.postsService.getPost(this.postId).subscribe(postData => {\n          this.isLoading = false;\n          this.post = {\n            id: postData._id,\n            title: postData.title,\n            content: postData.content,\n            imagePath: postData.imagePath,\n            creator: postData.creator,\n            course: postData.course,\n            university: postData.university,\n            author: postData.author,\n            messages: postData.messages,\n            startingPrice: postData.startingPrice,\n            minimumAllowedPrice: postData.minimumAllowedPrice,\n            winner: postData.winner,\n            date: postData.date,\n            bought: postData.bought,\n            bidders: postData.bidders\n          };\n          this.finalAmount = postData.startingPrice;\n        });\n      }\n    });\n  }\n\n  onBuy() {\n    this.postsService.buyProduct(\n      this.post.id,\n      this.post.title,\n      this.post.content,\n      this.post.imagePath,\n      this.post.course,\n      this.post.university,\n      this.post.author,\n      this.post.messages,\n      this.post.startingPrice,\n      this.post.minimumAllowedPrice,\n      this.post.winner,\n      this.post.date,\n      this.post.bidders\n    );\n  }\n}\n","<mat-card>\n  <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n  <mat-card-content *ngIf=\"!isLoading\">\n    <mat-card-title *ngIf=\"currentUser == post.winner\">You won this product!</mat-card-title>\n    Title: {{post.title}} <br>\n    Author: {{post.author}} <br>\n    Course: {{post.course}} <br>\n    University: {{post.university}} <br>\n    Content: {{post.content}} <br>\n    Price: {{post.startingPrice}}$ <br>\n    <img height=\"100\" width=\"100\" src={{post.imagePath}}>\n  </mat-card-content>\n  <h1 *ngIf=\"!isLoading\" align=\"center\">Buy</h1>\n      <br> <br>\n      <input type =\"number\" disabled [(ngModel)] = \"finalAmount\">\n      <div id=\"paypal-checkout-btn\"></div>\n</mat-card>\n\n\n\n","import { AbstractControl } from \"@angular/forms\";\nimport { Observable, Observer, of } from \"rxjs\";\n\nexport const mimeType = (\n  control: AbstractControl\n): Promise<{ [key: string]: any }> | Observable<{ [key: string]: any }> => {\n  if (typeof(control.value) === 'string') {\n    return of(null);\n  }\n  const file = control.value as File;\n  const fileReader = new FileReader();\n  const frObs = Observable.create(\n    (observer: Observer<{ [key: string]: any }>) => {\n      fileReader.addEventListener(\"loadend\", () => {\n        const arr = new Uint8Array(fileReader.result as ArrayBuffer).subarray(0, 4);\n        let header = \"\";\n        let isValid = false;\n        for (let i = 0; i < arr.length; i++) {\n          header += arr[i].toString(16);\n        }\n        switch (header) {\n          case \"89504e47\":\n            isValid = true;\n            break;\n          case \"ffd8ffe0\":\n          case \"ffd8ffe1\":\n          case \"ffd8ffe2\":\n          case \"ffd8ffe3\":\n          case \"ffd8ffe8\":\n            isValid = true;\n            break;\n          default:\n            isValid = false;\n            break;\n        }\n        if (isValid) {\n          observer.next(null);\n        } else {\n          observer.next({ invalidMimeType: true });\n        }\n        observer.complete();\n      });\n      fileReader.readAsArrayBuffer(file);\n    }\n  );\n  return frObs;\n};\n","import {Component, OnInit} from '@angular/core';\nimport { Post } from '../post.model';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { PostsService } from '../post.service';\nimport { ActivatedRoute, ParamMap } from '@angular/router';\nimport { Validators } from '@angular/forms';\nimport { mimeType} from './mime-type.validator';\n\n@Component({\n  selector: 'app-post-create',\n  templateUrl: './post-create.component.html',\n  styleUrls: ['./post-create.component.css']\n})\nexport class PostCreateComponent implements OnInit {\n\n  constructor(public postsService: PostsService, public route: ActivatedRoute) {}\n  private mode = 'create';\n  private postId: string;\n  public post: Post;\n  public isLoading = false;\n  form: FormGroup;\n  imagePreview: string;\n\n  ngOnInit() {\n    this.form = new FormGroup({\n      title: new FormControl(null, {validators: [Validators.required, Validators.minLength(3)]}),\n      author: new FormControl(null, {validators: [Validators.required]}),\n      content: new FormControl(null, {validators: [Validators.required]}),\n      course: new FormControl(null, {validators: [Validators.required]}),\n      university: new FormControl(null, {validators: [Validators.required]}),\n      image: new FormControl(null, {validators: [Validators.required], asyncValidators: [mimeType]}),\n      startingPrice: new FormControl(null, {validators: [Validators.required]}),\n      minimumAllowedPrice: new FormControl(null, {validators: [Validators.required]}),\n      date: new FormControl(null, {validators: [Validators.required]})\n    });\n    this.route.paramMap.subscribe( (paramMap: ParamMap) => {\n      if(paramMap.has('postId')) {\n        this.mode = 'edit';\n        this.postId = paramMap.get('postId');\n        this.isLoading = true;\n        this.postsService.getPost(this.postId).subscribe(postData => {\n          this.isLoading = false;\n          this.post = {\n            id: postData._id,\n            title: postData.title,\n            content: postData.content,\n            imagePath: postData.imagePath,\n            creator: postData.creator,\n            course: postData.course,\n            university: postData.university,\n            author: postData.author,\n            messages: postData.messages,\n            startingPrice: postData.startingPrice,\n            minimumAllowedPrice: postData.minimumAllowedPrice,\n            winner: postData.winner,\n            date: postData.date,\n            bought: postData.bought,\n            bidders: postData.bidders\n          };\n          this.form.setValue({\n            title: this.post.title,\n            content: this.post.content,\n            image: this.post.imagePath,\n            course: this.post.course,\n            university: this.post.university,\n            author: this.post.author,\n            startingPrice: this.post.startingPrice,\n            minimumAllowedPrice: this.post.minimumAllowedPrice,\n            date: this.post.date\n          });\n        });\n      } else {\n        this.mode = 'create';\n        this.postId = null;\n      }\n    });\n  }\n\n  onImagePicked(event: Event) {\n    const file = (event.target as HTMLInputElement).files[0];\n    this.form.patchValue({image: file});\n    this.form.get('image').updateValueAndValidity();\n    const reader = new FileReader();\n    reader.onload = () => {\n        this.imagePreview = reader.result as string;\n    };\n    reader.readAsDataURL(file);\n  }\n\n  onSavePost() {\n    if(this.form.invalid || this.form.value.startingPrice <= 0 || this.form.value.minimumAllowedPrice <= 0) {\n      window.alert(\"Introduce all the fields and the image! Prices should be bigger than 0!\");\n      return;\n    }\n    this.isLoading = true;\n    if(this.mode == \"create\") {\n      this.postsService.addPost(\n        this.form.value.title,\n        this.form.value.content,\n        this.form.value.image,\n        this.form.value.course,\n        this.form.value.university,\n        this.form.value.author,\n        this.form.value.startingPrice,\n        this.form.value.minimumAllowedPrice,\n        this.form.value.date\n      );\n    } else {\n      this.postsService.updatePost(\n        this.postId,\n        this.form.value.title,\n        this.form.value.content,\n        this.form.value.image,\n        this.form.value.course,\n        this.form.value.university,\n        this.form.value.author,\n        this.post.messages,\n        this.post.startingPrice,\n        this.post.minimumAllowedPrice,\n        this.post.winner,\n        this.post.date,\n        this.post.bidders\n        );\n    }\n    this.form.reset();\n    }\n}\n","<mat-card>\n  <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n    <form [formGroup]=\"form\" (submit) = \"onSavePost()\" *ngIf=\"!isLoading\">\n      <mat-form-field>\n        <input\n        matInput type = \"text\"\n        formControlName=\"title\"\n        placeholder= \"Title\"\n        >\n        <mat-error *ngIf=\"form.get('title').invalid\">Put a title!</mat-error>\n      </mat-form-field>\n      <br>\n      <mat-form-field>\n        <input\n        matInput type = \"text\"\n        formControlName=\"author\"\n        placeholder= \"Author\"\n        >\n        <mat-error *ngIf=\"form.get('author').invalid\">Put an author!</mat-error>\n      </mat-form-field>\n      <br>\n      <mat-form-field>\n        <input\n        matInput type = \"text\"\n        formControlName=\"course\"\n        placeholder= \"Course\"\n        >\n        <mat-error *ngIf=\"form.get('course').invalid\">Put a course!</mat-error>\n      </mat-form-field>\n      <br>\n      <mat-form-field>\n        <input\n        matInput type = \"text\"\n        formControlName=\"university\"\n        placeholder= \"University\"\n        >\n        <mat-error *ngIf=\"form.get('university').invalid\">Put a course!</mat-error>\n      </mat-form-field>\n      <br>\n      <mat-form-field>\n        <input\n        matInput type = \"number\"\n        formControlName=\"startingPrice\"\n        placeholder= \"Starting Price\"\n        >\n        <mat-error *ngIf=\"form.get('startingPrice').invalid\">Put a starting price!</mat-error>\n      </mat-form-field>\n      <br>\n      <mat-form-field>\n        <input\n        matInput type = \"number\"\n        formControlName=\"minimumAllowedPrice\"\n        placeholder= \"Minimum Allowed Price\"\n        >\n        <mat-error *ngIf=\"form.get('minimumAllowedPrice').invalid\">Put a minimum allowed price!</mat-error>\n      </mat-form-field>\n      <br>\n      <mat-form-field>\n        <mat-label>Expiration Date</mat-label>\n        <input matInput [matDatepicker]=\"picker1\" formControlName=\"date\">\n        <mat-datepicker-toggle matSuffix [for]=\"picker1\"></mat-datepicker-toggle>\n        <mat-datepicker #picker1></mat-datepicker>\n        <mat-datepicker #picker></mat-datepicker>\n      </mat-form-field>\n      <br>\n      <div>\n        <button mat-stroked-button type=\"button\" (click)=\"filePicker.click()\">Pick image!</button>\n        <input type=\"file\" #filePicker (change)=\"onImagePicked($event)\">\n      </div>\n      <div class=\"image-preview\" *ngIf=\"imagePreview !=='' && imagePreview && form.get('image').valid\">\n        <img [src] = \"imagePreview\" [alt]=\"form.value.title\">\n      </div>\n      <br>\n      <mat-form-field>\n        <textarea matInput\n        rows=\"1\"\n        formControlName=\"content\"\n        placeholder= \"Post Content\"\n        >\n        </textarea>\n        <mat-error *ngIf=\"form.get('content').invalid\">Put a content!</mat-error>\n      </mat-form-field>\n      <br>\n    <button\n      mat-raised-button\n      color = \"primary\"\n      type=\"submit\">Save Button\n    </button>\n    </form>\n</mat-card>\n","import {Component, OnInit, OnDestroy} from '@angular/core';\nimport { Post } from '../post.model'\nimport { PostsService } from '../post.service';\nimport { Subscription } from 'rxjs';\nimport { PageEvent } from '@angular/material/paginator';\nimport { AuthService } from '../../../auth/auth.service';\n\n@Component({\n  templateUrl: './post-list-bought.component.html',\n  styleUrls: ['./post-list-bought.component.css']\n})\n\nexport class PostListBoughtComponent implements OnInit, OnDestroy {\n  posts: Post[] = [];\n\n  isLoading = false;\n  totalPosts = 0;\n  postsPerPage = 10;\n  currentPage = 1;\n  pageSizeOption = [1, 2, 5, 10];\n  userIsAuthenticated = false;\n  userIsAdmin = false;\n  userId: string;\n  private postsSub: Subscription;\n  private authStatusSub: Subscription;\n  searchTitle: string;\n  searchAuthor: string;\n  searchUniversity: string;\n  searchCourse: string;\n  today = Date.now();\n\n\n  constructor(public postsService: PostsService, private authService: AuthService) {\n    setInterval(() => {this.today = Date.now()}, 1);\n  }\n\n\n  ngOnInit() {\n    this.isLoading = true;\n    this.userId = this.authService.getUserId();\n    this.postsService.getPostsBought(this.postsPerPage, this.currentPage, this.userId);\n    this.postsSub = this.postsService.getPostUpdateListener()\n    .subscribe(\n      (postData: {posts: Post[], postCount: number}) =>  {\n        this.isLoading = false;\n        this.totalPosts = postData.postCount;\n        this.posts = postData.posts;\n      }\n    );\n\n    this.userIsAuthenticated = this.authService.getIsAuth();\n    this.userIsAdmin = this.authService.getIsAdmin();\n    this.authStatusSub = this.authService.getAuthStatusListener().subscribe(isAuthenticated => {\n      this.userIsAuthenticated = isAuthenticated;\n      this.userId = this.authService.getUserId();\n    });\n  }\n\n  ngOnDestroy() {\n    this.postsSub.unsubscribe();\n    this.authStatusSub.unsubscribe();\n  }\n\n  onChangedPage(pageData: PageEvent) {\n    this.isLoading = true\n    this.currentPage = pageData.pageIndex + 1;\n    this.postsPerPage = pageData.pageSize;\n    this.postsService.getPostsBought(this.postsPerPage, this.currentPage, this.userId);\n  }\n}\n","<mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n<mat-accordion multi=\"true\" *ngIf = \"posts.length>0 && !isLoading\">\n  <input type=\"text\" [(ngModel)]=\"searchTitle\" placeholder=\"Search Title\" />\n  <input type=\"text\" [(ngModel)]=\"searchAuthor\" placeholder=\"Search Author\" />\n  <input type=\"text\" [(ngModel)]=\"searchUniversity\" placeholder=\"Search University\" />\n  <input type=\"text\" [(ngModel)]=\"searchCourse\" placeholder=\"Search Course\" />\n  <br>\n  <br>\n  <mat-expansion-panel *ngFor=\"let post of posts | filter: searchAuthor : 'author' | filter: searchTitle : 'title' | filter: searchCourse: 'course' | filter: searchUniversity : 'university' \">\n    <mat-expansion-panel-header>\n      <mat-panel-title *ngIf=\"post.date < today \">\n        Title: {{post.title}}, Author: {{post.author}}, Expiry in: BOUGHT, Price: {{post.startingPrice}}$, You bought this product!\n      </mat-panel-title>\n    </mat-expansion-panel-header>\n    <mat-panel-description>\n    <p> Author: {{post.author}} </p>\n    <p> University: {{post.university}} </p>\n    <p> Course: {{post.course}} </p>\n    <p> Content: {{post.content}} </p>\n    <div class = \"post-image\">\n      <img [src]=\"post.imagePath\"  [alt]=\"post.title\">\n    </div>\n  </mat-panel-description>\n  </mat-expansion-panel>\n</mat-accordion>\n<mat-paginator *ngIf = \"posts.length>0\" [length]=\"totalPosts\" [pageSize]=\"postsPerPage\" [pageSizeOptions]=\"pageSizeOption\" (page)=\"onChangedPage($event)\" ></mat-paginator>\n<p class = \"info-text mat-body-1\" *ngIf=\"posts.length == 0 && !isLoading\">No products bought yet!</p>\n\n","import {Component, OnInit, OnDestroy} from '@angular/core';\nimport { Post } from '../post.model'\nimport { PostsService } from '../post.service';\nimport { Subscription } from 'rxjs';\nimport { PageEvent } from '@angular/material/paginator';\nimport { AuthService } from '../../../auth/auth.service';\n\n@Component({\n  templateUrl: './post-list-buying.component.html',\n  styleUrls: ['./post-list-buying.component.css']\n})\n\nexport class PostListBuyingComponent implements OnInit, OnDestroy {\n  posts: Post[] = [];\n\n  isLoading = false;\n  totalPosts = 0;\n  postsPerPage = 10;\n  currentPage = 1;\n  pageSizeOption = [1, 2, 5, 10];\n  userIsAuthenticated = false;\n  userIsAdmin = false;\n  userId: string;\n  private postsSub: Subscription;\n  private authStatusSub: Subscription;\n  searchTitle: string;\n  searchAuthor: string;\n  searchUniversity: string;\n  searchCourse: string;\n  today = Date.now();\n\n\n  constructor(public postsService: PostsService, private authService: AuthService) {\n    setInterval(() => {this.today = Date.now()}, 1);\n  }\n\n\n  ngOnInit() {\n    this.isLoading = true;\n    this.userId = this.authService.getUserId();\n    this.postsService.getPostsBiding(this.postsPerPage, this.currentPage, this.userId);\n    this.postsSub = this.postsService.getPostUpdateListener()\n    .subscribe(\n      (postData: {posts: Post[], postCount: number}) =>  {\n        this.isLoading = false;\n        this.totalPosts = postData.postCount;\n        this.posts = postData.posts;\n      }\n    );\n\n    this.userIsAuthenticated = this.authService.getIsAuth();\n    this.userIsAdmin = this.authService.getIsAdmin();\n    this.authStatusSub = this.authService.getAuthStatusListener().subscribe(isAuthenticated => {\n      this.userIsAuthenticated = isAuthenticated;\n      this.userId = this.authService.getUserId();\n    });\n  }\n\n  ngOnDestroy() {\n    this.postsSub.unsubscribe();\n    this.authStatusSub.unsubscribe();\n  }\n\n  onChangedPage(pageData: PageEvent) {\n    this.isLoading = true\n    this.currentPage = pageData.pageIndex + 1;\n    this.postsPerPage = pageData.pageSize;\n    this.postsService.getPostsBiding(this.postsPerPage, this.currentPage, this.userId);\n  }\n}\n","<mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n<mat-accordion multi=\"true\" *ngIf = \"posts.length>0 && !isLoading\">\n  <input type=\"text\" [(ngModel)]=\"searchTitle\" placeholder=\"Search Title\" />\n  <input type=\"text\" [(ngModel)]=\"searchAuthor\" placeholder=\"Search Author\" />\n  <input type=\"text\" [(ngModel)]=\"searchUniversity\" placeholder=\"Search University\" />\n  <input type=\"text\" [(ngModel)]=\"searchCourse\" placeholder=\"Search Course\" />\n  <br>\n  <br>\n  <mat-expansion-panel *ngFor=\"let post of posts | filter: searchAuthor : 'author' | filter: searchTitle : 'title' | filter: searchCourse: 'course' | filter: searchUniversity : 'university' \">\n    <mat-expansion-panel-header  *ngIf=\"post.date > today && userId == post.winner \">\n      <mat-panel-title>\n        Title: {{post.title}}, Author: {{post.author}}, Expiry in: {{ post.date - today | date:'dd:hh:mm:ss'}}, Price: {{post.startingPrice}}$, You are currently winning this product!\n      </mat-panel-title>\n    </mat-expansion-panel-header>\n    <mat-expansion-panel-header  *ngIf=\"post.date > today && userId != post.winner \">\n      <mat-panel-title>\n        Title: {{post.title}}, Author: {{post.author}}, Expiry in: {{ post.date - today | date:'dd:hh:mm:ss'}}, Price: {{post.startingPrice}}$, You were surpassed!\n      </mat-panel-title>\n    </mat-expansion-panel-header>\n    <mat-panel-description>\n    <p> Author: {{post.author}} </p>\n    <p> University: {{post.university}} </p>\n    <p> Course: {{post.course}} </p>\n    <p> Content: {{post.content}} </p>\n    <div class = \"post-image\">\n      <img [src]=\"post.imagePath\"  [alt]=\"post.title\">\n    </div>\n    <mat-action-row *ngIf=\"userIsAuthenticated && !userIsAdmin\">\n      <a mat-button color = \"primary\" [routerLink]=\"['/bid', post.id]\" *ngIf=\"userId!= post.creator\"> BID </a>\n      <a mat-button color = \"primary\" [routerLink]=\"['/message', post.id]\" *ngIf=\"userId!= post.creator\"> MESSAGE SELLER </a>\n    </mat-action-row>\n  </mat-panel-description>\n  </mat-expansion-panel>\n</mat-accordion>\n<mat-paginator *ngIf = \"posts.length>0\" [length]=\"totalPosts\" [pageSize]=\"postsPerPage\" [pageSizeOptions]=\"pageSizeOption\" (page)=\"onChangedPage($event)\" ></mat-paginator>\n<p class = \"info-text mat-body-1\" *ngIf=\"posts.length == 0 && !isLoading\">No current bids!</p>\n\n","import {Component, OnInit, OnDestroy} from '@angular/core';\nimport { Post } from '../post.model'\nimport { PostsService } from '../post.service';\nimport { Subscription } from 'rxjs';\nimport { PageEvent } from '@angular/material/paginator';\nimport { AuthService } from '../../../auth/auth.service';\n\n@Component({\n  templateUrl: './post-list-expired.component.html',\n  styleUrls: ['./post-list-expired.component.css']\n})\n\nexport class PostListExpiredComponent implements OnInit, OnDestroy {\n  posts: Post[] = [];\n\n  isLoading = false;\n  totalPosts = 0;\n  postsPerPage = 10;\n  currentPage = 1;\n  pageSizeOption = [1, 2, 5, 10];\n  userIsAuthenticated = false;\n  userIsAdmin = false;\n  userId: string;\n  private postsSub: Subscription;\n  private authStatusSub: Subscription;\n  searchTitle: string;\n  searchAuthor: string;\n  searchUniversity: string;\n  searchCourse: string;\n  today = Date.now();\n\n\n  constructor(public postsService: PostsService, private authService: AuthService) {\n    setInterval(() => {this.today = Date.now()}, 1);\n  }\n\n\n  ngOnInit() {\n    this.isLoading = true;\n    this.userId = this.authService.getUserId();\n    this.postsService.getPostsExpired(this.postsPerPage, this.currentPage);\n    this.postsSub = this.postsService.getPostUpdateListener()\n    .subscribe(\n      (postData: {posts: Post[], postCount: number}) =>  {\n        this.isLoading = false;\n        this.totalPosts = postData.postCount;\n        this.posts = postData.posts;\n      }\n    );\n\n    this.userIsAuthenticated = this.authService.getIsAuth();\n    this.userIsAdmin = this.authService.getIsAdmin();\n    this.authStatusSub = this.authService.getAuthStatusListener().subscribe(isAuthenticated => {\n      this.userIsAuthenticated = isAuthenticated;\n      this.userId = this.authService.getUserId();\n    });\n  }\n\n  ngOnDestroy() {\n    this.postsSub.unsubscribe();\n    this.authStatusSub.unsubscribe();\n  }\n\n  onChangedPage(pageData: PageEvent) {\n    this.isLoading = true\n    this.currentPage = pageData.pageIndex + 1;\n    this.postsPerPage = pageData.pageSize;\n    this.postsService.getPostsExpired(this.postsPerPage, this.currentPage);\n  }\n}\n","<mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n<mat-accordion multi=\"true\" *ngIf = \"posts.length>0 && !isLoading\">\n  <h3> Total number of expired posts: {{totalPosts}} </h3>\n  <input type=\"text\" [(ngModel)]=\"searchTitle\" placeholder=\"Search Title\" />\n  <input type=\"text\" [(ngModel)]=\"searchAuthor\" placeholder=\"Search Author\" />\n  <input type=\"text\" [(ngModel)]=\"searchUniversity\" placeholder=\"Search University\" />\n  <input type=\"text\" [(ngModel)]=\"searchCourse\" placeholder=\"Search Course\" />\n  <br>\n  <br>\n  <mat-expansion-panel *ngFor=\"let post of posts | filter: searchAuthor : 'author' | filter: searchTitle : 'title' | filter: searchCourse: 'course' | filter: searchUniversity : 'university' \">\n    <mat-expansion-panel-header>\n      <mat-panel-title *ngIf=\"post.date > today \">\n        Title: {{post.title}}, Author: {{post.author}}, Expiry in: {{ post.date - today | date:'dd:hh:mm:ss'}}, Price: {{post.startingPrice}}$\n      </mat-panel-title>\n      <mat-panel-title *ngIf=\"post.date < today \">\n        Title: {{post.title}}, Author: {{post.author}}, Expiry in: EXPIRED, Price: {{post.startingPrice}}$\n      </mat-panel-title>\n    </mat-expansion-panel-header>\n    <mat-panel-description>\n    <p> Author: {{post.author}} </p>\n    <p> University: {{post.university}} </p>\n    <p> Course: {{post.course}} </p>\n    <p> Content: {{post.content}} </p>\n    <div class = \"post-image\">\n      <img [src]=\"post.imagePath\"  [alt]=\"post.title\">\n    </div>\n  </mat-panel-description>\n  </mat-expansion-panel>\n</mat-accordion>\n<!-- <mat-paginator *ngIf = \"posts.length>0\" [length]=\"totalPosts\" [pageSize]=\"postsPerPage\" [pageSizeOptions]=\"pageSizeOption\" (page)=\"onChangedPage($event)\" ></mat-paginator> -->\n<p class = \"info-text mat-body-1\" *ngIf=\"posts.length == 0 && !isLoading\">No posts added yet!</p>\n\n","import {Component, OnInit, OnDestroy} from '@angular/core';\nimport { Post } from '../post.model'\nimport { PostsService } from '../post.service';\nimport { Subscription } from 'rxjs';\nimport { PageEvent } from '@angular/material/paginator';\nimport { AuthService } from '../../../auth/auth.service';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from \"../../../../environments/environment\";\nimport * as io from 'socket.io-client';\n\n@Component({\n  templateUrl: './post-list-selling.component.html',\n  styleUrls: ['./post-list-selling.component.css']\n})\n\nexport class PostListSellingComponent implements OnInit, OnDestroy {\n  socket;\n  posts: Post[] = [];\n\n  isLoading = false;\n  totalPosts = 0;\n  postsPerPage = 10;\n  currentPage = 1;\n  pageSizeOption = [1, 2, 5, 10];\n  userIsAuthenticated = false;\n  userIsAdmin = false;\n  userId: string;\n  private postsSub: Subscription;\n  private authStatusSub: Subscription;\n  searchTitle: string;\n  searchAuthor: string;\n  searchUniversity: string;\n  searchCourse: string;\n  today = Date.now();\n\n\n  constructor(public postsService: PostsService, private authService: AuthService, private http: HttpClient) {\n    setInterval(() => {this.today = Date.now()}, 1);\n    this.socket = io(environment.api);\n  }\n\n\n  ngOnInit() {\n    this.isLoading = true;\n    this.userId = this.authService.getUserId();\n    this.postsService.getPostsSelling(this.postsPerPage, this.currentPage, this.userId);\n    this.postsSub = this.postsService.getPostUpdateListener()\n    .subscribe(\n      (postData: {posts: Post[], postCount: number}) =>  {\n        this.isLoading = false;\n        this.totalPosts = postData.postCount;\n        this.posts = postData.posts;\n      }\n    );\n\n    this.userIsAuthenticated = this.authService.getIsAuth();\n    this.userIsAdmin = this.authService.getIsAdmin();\n    this.authStatusSub = this.authService.getAuthStatusListener().subscribe(isAuthenticated => {\n      this.userIsAuthenticated = isAuthenticated;\n      this.userId = this.authService.getUserId();\n    });\n\n    this.socket.once('postUpdated', () => {\n      this.ngOnInit();\n      window.alert(\"someone bid/bought one of your post!\")\n    })\n\n  }\n\n  ngOnDestroy() {\n    this.postsSub.unsubscribe();\n    this.authStatusSub.unsubscribe();\n  }\n\n  onChangedPage(pageData: PageEvent) {\n    this.isLoading = true\n    this.currentPage = pageData.pageIndex + 1;\n    this.postsPerPage = pageData.pageSize;\n    this.postsService.getPostsSelling(this.postsPerPage, this.currentPage, this.userId);\n  }\n}\n","<mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n<mat-accordion multi=\"true\" *ngIf = \"posts.length>0 && !isLoading\">\n  <input type=\"text\" [(ngModel)]=\"searchTitle\" placeholder=\"Search Title\" />\n  <input type=\"text\" [(ngModel)]=\"searchAuthor\" placeholder=\"Search Author\" />\n  <input type=\"text\" [(ngModel)]=\"searchUniversity\" placeholder=\"Search University\" />\n  <input type=\"text\" [(ngModel)]=\"searchCourse\" placeholder=\"Search Course\" />\n  <br>\n  <br>\n  <mat-expansion-panel *ngFor=\"let post of posts | filter: searchAuthor : 'author' | filter: searchTitle : 'title' | filter: searchCourse: 'course' | filter: searchUniversity : 'university' \">\n    <mat-expansion-panel-header>\n      <mat-panel-title *ngIf=\"post.date > today \">\n        Title: {{post.title}}, Author: {{post.author}}, Expiry in: {{ post.date - today | date:'dd:hh:mm:ss'}}, Price: {{post.startingPrice}}$\n      </mat-panel-title>\n      <mat-panel-title *ngIf=\"post.date < today && post.startingPrice >= post.minimumAllowedPrice && post.bought == false\">\n        Title: {{post.title}}, Author: {{post.author}}, Expiry in: WAITING FOR WINNER TO BUY, Price: {{post.startingPrice}}$\n      </mat-panel-title>\n      <mat-panel-title *ngIf=\"post.date < today && post.startingPrice >= post.minimumAllowedPrice && post.bought == true\">\n        Title: {{post.title}}, Author: {{post.author}}, Expiry in: SOLD, Price: {{post.startingPrice}}$\n      </mat-panel-title>\n      <mat-panel-title *ngIf=\"post.date < today && post.startingPrice < post.minimumAllowedPrice\">\n        Title: {{post.title}}, Author: {{post.author}}, Expiry in: EXPIRED AND NOT SOLD, Price: {{post.startingPrice}}$\n      </mat-panel-title>\n    </mat-expansion-panel-header>\n    <mat-panel-description>\n    <p> Author: {{post.author}} </p>\n    <p> University: {{post.university}} </p>\n    <p> Course: {{post.course}} </p>\n    <p> Content: {{post.content}} </p>\n    <div class = \"post-image\">\n      <img [src]=\"post.imagePath\"  [alt]=\"post.title\">\n    </div>\n    <mat-action-row *ngIf=\"userIsAuthenticated && !userIsAdmin\">\n      <a mat-button color = \"primary\" [routerLink]=\"['/message', post.id]\" *ngIf=\"userId == post.creator\"> SEE MESSAGES ON YOUR POST </a>\n    </mat-action-row>\n  </mat-panel-description>\n  </mat-expansion-panel>\n</mat-accordion>\n<mat-paginator *ngIf = \"posts.length>0\" [length]=\"totalPosts\" [pageSize]=\"postsPerPage\" [pageSizeOptions]=\"pageSizeOption\" (page)=\"onChangedPage($event)\" ></mat-paginator>\n<p class = \"info-text mat-body-1\" *ngIf=\"posts.length == 0 && !isLoading\">No posts added yet!</p>\n\n","import {Component, OnInit, OnDestroy} from '@angular/core';\nimport { Post } from '../post.model'\nimport { PostsService } from '../post.service';\nimport { Subscription } from 'rxjs';\nimport { PageEvent } from '@angular/material/paginator';\nimport { AuthService } from '../../../auth/auth.service';\n\n@Component({\n  templateUrl: './post-list-sold.component.html',\n  styleUrls: ['./post-list-sold.component.css']\n})\n\nexport class PostListSoldComponent implements OnInit, OnDestroy {\n  posts: Post[] = [];\n\n  isLoading = false;\n  totalPosts = 0;\n  postsPerPage = 10;\n  currentPage = 1;\n  pageSizeOption = [1, 2, 5, 10];\n  userIsAuthenticated = false;\n  userIsAdmin = false;\n  userId: string;\n  private postsSub: Subscription;\n  private authStatusSub: Subscription;\n  searchTitle: string;\n  searchAuthor: string;\n  searchUniversity: string;\n  searchCourse: string;\n  today = Date.now();\n\n\n  constructor(public postsService: PostsService, private authService: AuthService) {\n    setInterval(() => {this.today = Date.now()}, 1);\n  }\n\n\n  ngOnInit() {\n    this.isLoading = true;\n    this.userId = this.authService.getUserId();\n    this.postsService.getPostsSold(this.postsPerPage, this.currentPage);\n    this.postsSub = this.postsService.getPostUpdateListener()\n    .subscribe(\n      (postData: {posts: Post[], postCount: number}) =>  {\n        this.isLoading = false;\n        this.totalPosts = postData.postCount;\n        this.posts = postData.posts;\n      }\n    );\n\n    this.userIsAuthenticated = this.authService.getIsAuth();\n    this.userIsAdmin = this.authService.getIsAdmin();\n    this.authStatusSub = this.authService.getAuthStatusListener().subscribe(isAuthenticated => {\n      this.userIsAuthenticated = isAuthenticated;\n      this.userId = this.authService.getUserId();\n    });\n  }\n\n  ngOnDestroy() {\n    this.postsSub.unsubscribe();\n    this.authStatusSub.unsubscribe();\n  }\n\n  onChangedPage(pageData: PageEvent) {\n    this.isLoading = true\n    this.currentPage = pageData.pageIndex + 1;\n    this.postsPerPage = pageData.pageSize;\n    this.postsService.getPostsSold(this.postsPerPage, this.currentPage);\n  }\n}\n","<mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n<mat-accordion multi=\"true\" *ngIf = \"posts.length>0 && !isLoading\">\n  <h3> Total number of sold posts: {{totalPosts}} </h3>\n  <input type=\"text\" [(ngModel)]=\"searchTitle\" placeholder=\"Search Title\" />\n  <input type=\"text\" [(ngModel)]=\"searchAuthor\" placeholder=\"Search Author\" />\n  <input type=\"text\" [(ngModel)]=\"searchUniversity\" placeholder=\"Search University\" />\n  <input type=\"text\" [(ngModel)]=\"searchCourse\" placeholder=\"Search Course\" />\n  <br>\n  <br>\n  <mat-expansion-panel *ngFor=\"let post of posts | filter: searchAuthor : 'author' | filter: searchTitle : 'title' | filter: searchCourse: 'course' | filter: searchUniversity : 'university' \">\n    <mat-expansion-panel-header>\n      <mat-panel-title>\n        Title: {{post.title}}, Author: {{post.author}}, SOLD, minimumPrice: {{post.minimumAllowedPrice}}, offeredPrice: {{post.startingPrice}}\n      </mat-panel-title>\n    </mat-expansion-panel-header>\n    <mat-panel-description>\n    <p> Author: {{post.author}} </p>\n    <p> University: {{post.university}} </p>\n    <p> Course: {{post.course}} </p>\n    <p> Content: {{post.content}} </p>\n    <div class = \"post-image\">\n      <img [src]=\"post.imagePath\"  [alt]=\"post.title\">\n    </div>\n  </mat-panel-description>\n  </mat-expansion-panel>\n</mat-accordion>\n<mat-paginator *ngIf = \"posts.length>0\" [length]=\"totalPosts\" [pageSize]=\"postsPerPage\" [pageSizeOptions]=\"pageSizeOption\" (page)=\"onChangedPage($event)\" ></mat-paginator>\n<p class = \"info-text mat-body-1\" *ngIf=\"posts.length == 0 && !isLoading\">No posts added yet!</p>\n\n","import {Component, OnInit, OnDestroy} from '@angular/core';\nimport { Post } from '../post.model'\nimport { PostsService } from '../post.service';\nimport { Subscription } from 'rxjs';\nimport { PageEvent } from '@angular/material/paginator';\nimport { AuthService } from '../../../auth/auth.service';\n\n@Component({\n  templateUrl: './post-list-won.component.html',\n  styleUrls: ['./post-list-won.component.css']\n})\n\nexport class PostListWonComponent implements OnInit, OnDestroy {\n  posts: Post[] = [];\n\n  isLoading = false;\n  totalPosts = 0;\n  postsPerPage = 10;\n  currentPage = 1;\n  pageSizeOption = [1, 2, 5, 10];\n  userIsAuthenticated = false;\n  userIsAdmin = false;\n  userId: string;\n  private postsSub: Subscription;\n  private authStatusSub: Subscription;\n  searchTitle: string;\n  searchAuthor: string;\n  searchUniversity: string;\n  searchCourse: string;\n  today = Date.now();\n\n\n  constructor(public postsService: PostsService, private authService: AuthService) {\n    setInterval(() => {this.today = Date.now()}, 1);\n  }\n\n\n  ngOnInit() {\n    this.isLoading = true;\n    this.userId = this.authService.getUserId();\n    this.postsService.getPostsWon(this.postsPerPage, this.currentPage, this.userId);\n    this.postsSub = this.postsService.getPostUpdateListener()\n    .subscribe(\n      (postData: {posts: Post[], postCount: number}) =>  {\n        this.isLoading = false;\n        this.totalPosts = postData.postCount;\n        this.posts = postData.posts;\n      }\n    );\n\n    this.userIsAuthenticated = this.authService.getIsAuth();\n    this.userIsAdmin = this.authService.getIsAdmin();\n    this.authStatusSub = this.authService.getAuthStatusListener().subscribe(isAuthenticated => {\n      this.userIsAuthenticated = isAuthenticated;\n      this.userId = this.authService.getUserId();\n    });\n  }\n\n  ngOnDestroy() {\n    this.postsSub.unsubscribe();\n    this.authStatusSub.unsubscribe();\n  }\n\n  onChangedPage(pageData: PageEvent) {\n    this.isLoading = true\n    this.currentPage = pageData.pageIndex + 1;\n    this.postsPerPage = pageData.pageSize;\n    this.postsService.getPostsWon(this.postsPerPage, this.currentPage, this.userId);\n  }\n}\n","<mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n<mat-accordion multi=\"true\" *ngIf = \"posts.length>0 && !isLoading\">\n  <input type=\"text\" [(ngModel)]=\"searchTitle\" placeholder=\"Search Title\" />\n  <input type=\"text\" [(ngModel)]=\"searchAuthor\" placeholder=\"Search Author\" />\n  <input type=\"text\" [(ngModel)]=\"searchUniversity\" placeholder=\"Search University\" />\n  <input type=\"text\" [(ngModel)]=\"searchCourse\" placeholder=\"Search Course\" />\n  <br>\n  <br>\n  <mat-expansion-panel *ngFor=\"let post of posts | filter: searchAuthor : 'author' | filter: searchTitle : 'title' | filter: searchCourse: 'course' | filter: searchUniversity : 'university' \">\n    <mat-expansion-panel-header>\n      <mat-panel-title *ngIf=\"post.date < today \">\n        Title: {{post.title}}, Author: {{post.author}}, Expiry in: WON, Price: {{post.startingPrice}}$, You won this product!\n      </mat-panel-title>\n    </mat-expansion-panel-header>\n    <mat-panel-description>\n    <p> Author: {{post.author}} </p>\n    <p> University: {{post.university}} </p>\n    <p> Course: {{post.course}} </p>\n    <p> Content: {{post.content}} </p>\n    <div class = \"post-image\">\n      <img [src]=\"post.imagePath\"  [alt]=\"post.title\">\n    </div>\n    <mat-action-row *ngIf=\"userIsAuthenticated && !userIsAdmin\">\n      <a mat-button color = \"primary\" [routerLink]=\"['/buy', post.id]\" *ngIf=\"userId!= post.creator\"> BUY </a>\n    </mat-action-row>\n  </mat-panel-description>\n  </mat-expansion-panel>\n</mat-accordion>\n<mat-paginator *ngIf = \"posts.length>0\" [length]=\"totalPosts\" [pageSize]=\"postsPerPage\" [pageSizeOptions]=\"pageSizeOption\" (page)=\"onChangedPage($event)\" ></mat-paginator>\n<p class = \"info-text mat-body-1\" *ngIf=\"posts.length == 0 && !isLoading\">No auctions won!</p>\n\n","import {Component, OnInit, OnDestroy} from '@angular/core';\nimport { Post } from '../post.model'\nimport { PostsService } from '../post.service';\nimport { Subscription } from 'rxjs';\nimport { PageEvent } from '@angular/material/paginator';\nimport { AuthService } from '../../../auth/auth.service';\n\n@Component({\n  selector: 'app-post-list',\n  templateUrl: './post-list.component.html',\n  styleUrls: ['./post-list.component.css']\n})\n\nexport class PostListComponent implements OnInit, OnDestroy {\n  posts: Post[] = [];\n\n  isLoading = false;\n  totalPosts = 0;\n  postsPerPage = 10;\n  currentPage = 1;\n  pageSizeOption = [1, 2, 5, 10];\n  userIsAuthenticated = false;\n  userIsAdmin = false;\n  userId: string;\n  private postsSub: Subscription;\n  private authStatusSub: Subscription;\n  searchTitle: string;\n  searchAuthor: string;\n  searchUniversity: string;\n  searchCourse: string;\n  searchMinimumPrice: number;\n  searchMaximumPrice: number;\n  today = Date.now();\n  expired: boolean;\n\n\n  constructor(public postsService: PostsService, private authService: AuthService) {\n    setInterval(() => {this.today = Date.now()}, 1);\n  }\n\n  update() {\n    this.ngOnInit();\n    this.searchTitle = undefined;\n    this.searchAuthor = undefined;\n    this.searchCourse = undefined;\n    this.searchUniversity = undefined;\n    this.searchMinimumPrice = undefined;\n    this.searchMaximumPrice = undefined;\n  }\n\n  ngOnInit() {\n    this.isLoading = true;\n    this.userId = this.authService.getUserId();\n    this.postsService.getPosts(this.postsPerPage, this.currentPage, this.userId, this.searchAuthor, this.searchTitle, this.searchUniversity, this.searchCourse, this.searchMinimumPrice, this.searchMaximumPrice);\n    this.postsSub = this.postsService.getPostUpdateListener()\n    .subscribe(\n      (postData: {posts: Post[], postCount: number}) =>  {\n        this.isLoading = false;\n        this.totalPosts = postData.postCount;\n        this.posts = postData.posts;\n      }\n    );\n\n    this.userIsAuthenticated = this.authService.getIsAuth();\n    this.userIsAdmin = this.authService.getIsAdmin();\n    this.authStatusSub = this.authService.getAuthStatusListener().subscribe(isAuthenticated => {\n      this.userIsAuthenticated = isAuthenticated;\n      this.userId = this.authService.getUserId();\n    });\n  }\n\n  ngOnDestroy() {\n    this.postsSub.unsubscribe();\n    this.authStatusSub.unsubscribe();\n  }\n\n  onDelete(postId: string) {\n    this.isLoading = true;\n    this.postsService.deletePost(postId).subscribe( () => {\n      this.postsService.getPosts(this.postsPerPage, this.currentPage, this.userId, this.searchAuthor, this.searchTitle, this.searchUniversity, this.searchCourse, this.searchMinimumPrice, this.searchMaximumPrice);\n    });\n  }\n\n  onChangedPage(pageData: PageEvent) {\n    this.isLoading = true\n    this.currentPage = pageData.pageIndex + 1;\n    this.postsPerPage = pageData.pageSize;\n    this.postsService.getPosts(this.postsPerPage, this.currentPage, this.userId, this.searchAuthor, this.searchTitle, this.searchUniversity, this.searchCourse, this.searchMinimumPrice, this.searchMaximumPrice);\n  }\n\n}\n","<mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n<mat-accordion multi=\"true\" *ngIf = \"posts.length>0 && !isLoading\">\n  <h3 *ngIf=\"userIsAdmin\">Total Posts on sale: {{totalPosts}}</h3>\n  <input type=\"text\" [(ngModel)]=\"searchTitle\" placeholder=\"Search Title\" />\n  <input type=\"text\" [(ngModel)]=\"searchAuthor\" placeholder=\"Search Author\" />\n  <input type=\"text\" [(ngModel)]=\"searchUniversity\" placeholder=\"Search University\" />\n  <input type=\"text\" [(ngModel)]=\"searchCourse\" placeholder=\"Search Course\" />\n  <input type=\"number\" [(ngModel)]=\"searchMinimumPrice\" placeholder=\"Minimum Price\" />\n  <input type=\"number\" [(ngModel)]=\"searchMaximumPrice\" placeholder=\"Maximum Price\" />\n  <button (click)= update() >Apply Filters</button>\n  <br><br>\n  <mat-expansion-panel *ngFor=\"let post of posts | filter: searchCourse : 'course'\">\n    <mat-expansion-panel-header>\n      <mat-panel-title *ngIf=\"post.date > today \">\n        Title: {{post.title}}, Author: {{post.author}}, Expiry in: {{ post.date - today | date:'dd:hh:mm:ss'}}, Price: {{post.startingPrice}}$\n      </mat-panel-title>\n      <mat-panel-title *ngIf=\"post.date < today \">\n        Title: {{post.title}}, Author: {{post.author}}, Expiry in: EXPIRED, Price: {{post.startingPrice}}$\n      </mat-panel-title>\n    </mat-expansion-panel-header>\n    <mat-panel-description *ngIf=\"post.date > today\">\n    <p> Author: {{post.author}} </p>\n    <p> University: {{post.university}} </p>\n    <p> Course: {{post.course}} </p>\n    <p> Content: {{post.content}} </p>\n    <div class = \"post-image\">\n      <img [src]=\"post.imagePath\"  [alt]=\"post.title\">\n    </div>\n    <mat-action-row *ngIf=\"userIsAdmin\">\n      <a mat-button color = \"primary\" [routerLink]=\"['/edit', post.id]\"> EDIT </a>\n      <button mat-button color = \"warn\" (click) = \"onDelete(post.id)\"> DELETE </button>\n    </mat-action-row>\n    <mat-action-row *ngIf=\"userIsAuthenticated && !userIsAdmin\">\n      <a mat-button color = \"primary\" [routerLink]=\"['/bid', post.id]\" *ngIf=\"userId!= post.creator\"> BID </a>\n      <a mat-button color = \"primary\" [routerLink]=\"['/message', post.id]\" *ngIf=\"userId!= post.creator\"> MESSAGE SELLER </a>\n      <a mat-button color = \"primary\" [routerLink]=\"['/message', post.id]\" *ngIf=\"userId == post.creator\"> SEE MESSAGES ON YOUR POST </a>\n    </mat-action-row>\n  </mat-panel-description>\n  </mat-expansion-panel>\n</mat-accordion>\n<mat-paginator *ngIf = \"posts.length>0\" [length]=\"totalPosts\" [pageSize]=\"postsPerPage\" [pageSizeOptions]=\"pageSizeOption\" (page)=\"onChangedPage($event)\" ></mat-paginator>\n<p class = \"info-text mat-body-1\" *ngIf=\"posts.length == 0 && !isLoading\">No books on sale yet/ No books with searched criterias!</p>\n<button class=\"host\"  *ngIf=\"posts.length == 0 && !isLoading\" (click)= update()>Reset Search</button>\n\n","import {Component, OnInit} from '@angular/core';\nimport { Post } from '../post.model';\nimport { PostsService } from '../post.service';\nimport { ActivatedRoute, ParamMap } from '@angular/router';\nimport { FormGroup, FormControl, FormControlDirective, FormArray } from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { AuthService } from 'src/app/auth/auth.service';\nimport { Message } from '../message.model';\n\n@Component({\n  templateUrl: './post-messages.component.html',\n  styleUrls: ['./post-messages.component.css']\n})\nexport class PostMessagesComponent implements OnInit {\n\n  constructor(public postsService: PostsService, public authService: AuthService, public route: ActivatedRoute) {}\n  private postId: string;\n  userId: string;\n  public post: Post;\n  public isLoading = false;\n  public addedMessage: Message;\n  public addedReply: Message;\n  form: FormGroup;\n  isChecked: boolean;\n\n  ngOnInit() {\n    this.isChecked = false;\n    this.userId = this.authService.getUserId();\n    this.form = new FormGroup({\n      message: new FormControl(null, {validators: [Validators.required]}),\n      replies: new FormArray([new FormControl(null),\n                              new FormControl(null),\n                              new FormControl(null),\n                              new FormControl(null),\n                              new FormControl(null),\n                              new FormControl(null),\n                              new FormControl(null),\n                              new FormControl(null),\n                              new FormControl(null),\n                              new FormControl(null),\n                              new FormControl(null),\n                              new FormControl(null),\n                              new FormControl(null),\n                              new FormControl(null),\n                              new FormControl(null),\n                              new FormControl(null)])\n    });\n    this.route.paramMap.subscribe( (paramMap: ParamMap) => {\n      if(paramMap.has('postId')) {\n        this.postId = paramMap.get('postId');\n        this.isLoading = true;\n        this.postsService.getPost(this.postId).subscribe(postData => {\n          this.isLoading = false;\n          this.post = {\n            id: postData._id,\n            title: postData.title,\n            content: postData.content,\n            imagePath: postData.imagePath,\n            creator: postData.creator,\n            course: postData.course,\n            university: postData.university,\n            author: postData.author,\n            messages: postData.messages,\n            startingPrice: postData.startingPrice,\n            minimumAllowedPrice: postData.minimumAllowedPrice,\n            winner: postData.winner,\n            date: postData.date,\n            bought: postData.bought,\n            bidders: postData.bidders\n          };\n        });\n      }\n    });\n  }\n\n  OnChange($event){\n    this.isChecked = !this.isChecked\n}\n\n  onPostReply(index: number) {\n    this.addedReply = {\n      content: this.form.value.replies[index],\n      creator: this.userId,\n      public: true\n    }\n    this.post.messages[index].push(this.addedReply);\n    this.postsService.updatePostMessage(\n      this.post.id,\n      this.post.title,\n      this.post.content,\n      this.post.imagePath,\n      this.post.course,\n      this.post.university,\n      this.post.author,\n      this.post.messages,\n      this.post.startingPrice,\n      this.post.minimumAllowedPrice,\n      this.post.winner,\n      this.post.date,\n      this.post.bidders\n    );\n    this.form.reset();\n  }\n\n  onPostMessage() {\n    if(this.form.invalid) {\n      return;\n    }\n    this.addedMessage = {\n      content: this.form.value.message,\n      creator: this.userId,\n      public: !this.isChecked\n    }\n    this.post.messages.push([this.addedMessage]);\n    this.postsService.updatePostMessage(\n      this.post.id,\n      this.post.title,\n      this.post.content,\n      this.post.imagePath,\n      this.post.course,\n      this.post.university,\n      this.post.author,\n      this.post.messages,\n      this.post.startingPrice,\n      this.post.minimumAllowedPrice,\n      this.post.winner,\n      this.post.date,\n      this.post.bidders\n    );\n    this.form.reset();\n  }\n}\n","<mat-card>\n  <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n  <mat-card-content *ngIf=\"!isLoading\">\n    <h1 align=\"center\" *ngIf=\"post.creator == userId\">You are selling this product!</h1>\n    Title: {{post.title}} <br>\n    Author: {{post.author}} <br>\n    Course: {{post.course}} <br>\n    University: {{post.university}} <br>\n    Content: {{post.content}} <br>\n    <img height=\"100\" width=\"100\" src={{post.imagePath}}>\n  </mat-card-content>\n    <mat-accordion multi=\"true\" *ngIf=\"!isLoading\">\n      <br> <br>\n      <h1 align=\"center\"> Messages </h1>\n       <mat-card-content *ngFor=\"let messages of post.messages; index as i\">\n         <mat-expansion-panel *ngIf=\"messages[0].public || (post.creator == userId) || (messages[0].creator == userId)\">\n           <mat-expansion-panel-header *ngFor=\"let message of messages\">\n             <mat-label *ngIf=\"message.creator == post.creator && post.creator!== userId\">\n                Seller said:\n             </mat-label>\n             <mat-label *ngIf=\"message.creator == userId\">\n                You said:\n             </mat-label>\n             <p>\n               {{message.content}}\n             </p>\n           </mat-expansion-panel-header>\n          <div [formGroup] = \"form\">\n            <div formArrayName=\"replies\">\n              <input [formControlName]=\"i\" placeholder=\"Enter a reply\">\n              <button type=\"button\" (click)= \"onPostReply(i)\">Leave a reply!</button>\n            </div>\n          </div>\n         </mat-expansion-panel>\n       </mat-card-content>\n    <form [formGroup]=\"form\" (submit) = \"onPostMessage()\" *ngIf=\"userId!= post.creator\">\n      <mat-form-field>\n        <input\n        matInput type = \"text\"\n        formControlName = \"message\"\n        placeholder= \"Leave a Message\">\n      </mat-form-field>\n      <br>\n      <button\n        mat-raised-button\n        color = \"primary\"\n        type=\"submit\"> Post Message</button>\n        <br>\n        <mat-checkbox (change)=\"OnChange($event)\">Private Message!</mat-checkbox>\n    </form>\n\n    </mat-accordion>\n</mat-card>\n\n\n\n","import { NgModule } from '@angular/core';\nimport { PostListComponent } from '../post-create/post-list/post-list.component';\nimport { PostListSellingComponent } from '../post-create/post-list-selling/post-list-selling.component';\nimport { PostListBuyingComponent } from '../post-create/post-list-buying/post-list-buying.component';\nimport { PostListExpiredComponent } from '../post-create/post-list-expired/post-list-expired.component';\nimport { PostCreateComponent } from '../post-create/post-create/post-create.component';\nimport { PostBuyComponent} from '../post-create/post-buy/post-buy.component';\nimport { PostListWonComponent } from './post-list-won/post-list-won.component';\nimport { PostListBoughtComponent } from './post-list-bought/post-list-bought.component';\nimport { PostListSoldComponent } from './post-list-sold/post-list-sold.component';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms'\nimport { AngularMaterialModule } from 'src/app/angular-material.module';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { JsonFilterByPipe } from '../../helpers/json-filter-by.pipe'\nimport { FilterPipe } from '../../helpers/filter.pipe';\nimport { FilterPipeNumberLow } from '../../helpers/filter.pipe';\nimport { FilterPipeNumberHigh } from '../../helpers/filter.pipe';\nimport { PostMessagesComponent } from './post-messages/post-messages.component';\nimport { PostBidComponent } from './post-bid/post-bid.component';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core';\n\n\n\n@NgModule({\n  declarations: [\n    PostListComponent,\n    PostCreateComponent,\n    PostListSellingComponent,\n    PostListBuyingComponent,\n    PostListExpiredComponent,\n    PostListWonComponent,\n    PostMessagesComponent,\n    PostBuyComponent,\n    PostBidComponent,\n    PostListBoughtComponent,\n    PostListSoldComponent,\n    JsonFilterByPipe,\n    FilterPipe,\n    FilterPipeNumberLow,\n    FilterPipeNumberHigh\n  ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    AngularMaterialModule,\n    RouterModule,\n    FormsModule,\n    MatDatepickerModule,\n    MatNativeDateModule\n  ]\n})\nexport class PostsModule {}\n","import { Post } from './post.model';\nimport { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { environment } from \"../../../environments/environment\";\nimport { Message } from './message.model';\n\n\nconst BACKEND_URL = environment.apiUrl + \"/posts\";\n\n@Injectable({providedIn: 'root'})\nexport class PostsService {\n  private posts: Post[] = [];\n  private postsUpdated = new Subject<{posts: Post[], postCount: number}>();\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  getPosts(postsPerPage: number, currentPage: number, userId: string, author: string, title: string, university: string, course: string, minPrice: number, maxPrice: number) {\n    const queryParams = `?pageSize=${postsPerPage}&page=${currentPage}&creatorId=${userId}&author=${author}&title=${title}&university=${university}&course=${course}&date=${true}&minPrice=${minPrice}&maxPrice=${maxPrice}`;\n    this.http\n    .get<{message: string, posts: any, maxPosts: number}>(\n      BACKEND_URL+queryParams\n      )\n      .pipe(map(postData => {\n        return {\n          posts: postData.posts.map(post => {\n          return {\n            title: post.title,\n            content: post.content,\n            id: post._id,\n            imagePath: post.imagePath,\n            creator: post.creator,\n            course: post.course,\n            university: post.university,\n            author: post.author,\n            startingPrice: post.startingPrice,\n            minimumAllowedPrice: post.minimumAllowedPrice,\n            date: new Date(post.date),\n            bought: post.bought\n          };\n        }), maxPosts: postData.maxPosts};\n      }))\n      .subscribe( transformedPosts => {\n        this.posts = transformedPosts.posts;\n        this.postsUpdated.next({posts: [...this.posts], postCount: transformedPosts.maxPosts});\n      });\n  }\n\n  getPostsSelling(postsPerPage: number, currentPage: number, userId: string) {\n    const queryParams = `?pageSize=${postsPerPage}&page=${currentPage}&owner=${userId}`;\n    this.http\n    .get<{message: string, posts: any, maxPosts: number}>(\n      BACKEND_URL+queryParams\n      )\n      .pipe(map(postData => {\n        return {\n          posts: postData.posts.map( post => {\n          return {\n            title: post.title,\n            content: post.content,\n            id: post._id,\n            imagePath: post.imagePath,\n            creator: post.creator,\n            course: post.course,\n            university: post.university,\n            author: post.author,\n            startingPrice: post.startingPrice,\n            minimumAllowedPrice: post.minimumAllowedPrice,\n            date: new Date(post.date),\n            bought: post.bought\n          };\n        }), maxPosts: postData.maxPosts};\n      }))\n      .subscribe( transformedPosts => {\n        this.posts = transformedPosts.posts;\n        this.postsUpdated.next({posts: [...this.posts], postCount: transformedPosts.maxPosts});\n      });\n  }\n\n  getPostsBiding(postsPerPage: number, currentPage: number, userId: string) {\n    const queryParams = `?pageSize=${postsPerPage}&page=${currentPage}&bidder=${userId}&date=${true}`;\n    this.http\n    .get<{message: string, posts: any, maxPosts: number}>(\n      BACKEND_URL+queryParams\n      )\n      .pipe(map(postData => {\n        return {\n          posts: postData.posts.map( post => {\n          return {\n            title: post.title,\n            content: post.content,\n            id: post._id,\n            imagePath: post.imagePath,\n            creator: post.creator,\n            course: post.course,\n            university: post.university,\n            author: post.author,\n            startingPrice: post.startingPrice,\n            minimumAllowedPrice: post.minimumAllowedPrice,\n            winner: post.winner,\n            date: new Date(post.date),\n            bought: post.bought\n          };\n        }), maxPosts: postData.maxPosts};\n      }))\n      .subscribe( transformedPosts => {\n        this.posts = transformedPosts.posts;\n        this.postsUpdated.next({posts: [...this.posts], postCount: transformedPosts.maxPosts});\n      });\n  }\n\n  getPostsWon(postsPerPage: number, currentPage: number, userId: string) {\n    const queryParams = `?pageSize=${postsPerPage}&page=${currentPage}&winner=${userId}&date=${false}`;\n    this.http\n    .get<{message: string, posts: any, maxPosts: number}>(\n      BACKEND_URL+queryParams\n      )\n      .pipe(map(postData => {\n        return {\n          posts: postData.posts.map( post => {\n          return {\n            title: post.title,\n            content: post.content,\n            id: post._id,\n            imagePath: post.imagePath,\n            creator: post.creator,\n            course: post.course,\n            university: post.university,\n            author: post.author,\n            startingPrice: post.startingPrice,\n            minimumAllowedPrice: post.minimumAllowedPrice,\n            winner: post.winner,\n            date: new Date(post.date),\n            bought: post.bought\n          };\n        }), maxPosts: postData.maxPosts};\n      }))\n      .subscribe( transformedPosts => {\n        this.posts = transformedPosts.posts;\n        this.posts = this.posts.filter((post: Post) => post.startingPrice>=post.minimumAllowedPrice && post.bought == false)\n        this.postsUpdated.next({posts: [...this.posts], postCount: this.posts.length});\n      });\n  }\n\n  getPostsBought(postsPerPage: number, currentPage: number, userId: string) {\n    const queryParams = `?pageSize=${postsPerPage}&page=${currentPage}&boughter=${userId}&date=${false}&bought=${true}`;\n    this.http\n    .get<{message: string, posts: any, maxPosts: number}>(\n      BACKEND_URL+queryParams\n      )\n      .pipe(map(postData => {\n        return {\n          posts: postData.posts.map( post => {\n          return {\n            title: post.title,\n            content: post.content,\n            id: post._id,\n            imagePath: post.imagePath,\n            creator: post.creator,\n            course: post.course,\n            university: post.university,\n            author: post.author,\n            startingPrice: post.startingPrice,\n            minimumAllowedPrice: post.minimumAllowedPrice,\n            winner: post.winner,\n            date: new Date(post.date),\n            bought: post.bought\n          };\n        }), maxPosts: postData.maxPosts};\n      }))\n      .subscribe( transformedPosts => {\n        this.posts = transformedPosts.posts;\n        this.postsUpdated.next({posts: [...this.posts], postCount: transformedPosts.maxPosts});\n      });\n  }\n\n  getPostsExpired(postsPerPage: number, currentPage: number) {\n    const queryParams = `?pageSize=${postsPerPage}&page=${currentPage}`;\n    this.http\n    .get<{message: string, posts: any, maxPosts: number}>(\n      BACKEND_URL+queryParams\n      )\n      .pipe(map(postData => {\n        return {\n          posts: postData.posts.map( post => {\n          return {\n            title: post.title,\n            content: post.content,\n            id: post._id,\n            imagePath: post.imagePath,\n            creator: post.creator,\n            course: post.course,\n            university: post.university,\n            author: post.author,\n            startingPrice: post.startingPrice,\n            minimumAllowedPrice: post.minimumAllowedPrice,\n            winner: post.winner,\n            date: new Date(post.date),\n            bought: post.bought\n          };\n        }), maxPosts: postData.maxPosts};\n      }))\n      .subscribe( transformedPosts => {\n        this.posts = transformedPosts.posts;\n        this.posts = this.posts.filter((post: Post) => new Date(post.date) < new Date(Date.now()) && post.minimumAllowedPrice > post.startingPrice)\n        this.postsUpdated.next({posts: [...this.posts], postCount: this.posts.length});\n      });\n  }\n\n\n  getPostsSold(postsPerPage: number, currentPage: number) {\n    const queryParams = `?pageSize=${postsPerPage}&page=${currentPage}&sold=${true}`;\n    this.http\n    .get<{message: string, posts: any, maxPosts: number}>(\n      BACKEND_URL+queryParams\n      )\n      .pipe(map(postData => {\n        return {\n          posts: postData.posts.map( post => {\n          return {\n            title: post.title,\n            content: post.content,\n            id: post._id,\n            imagePath: post.imagePath,\n            creator: post.creator,\n            course: post.course,\n            university: post.university,\n            author: post.author,\n            startingPrice: post.startingPrice,\n            minimumAllowedPrice: post.minimumAllowedPrice,\n            winner: post.winner,\n            date: new Date(post.date),\n            bought: post.bought\n          };\n        }), maxPosts: postData.maxPosts};\n      }))\n      .subscribe( transformedPosts => {\n        this.posts = transformedPosts.posts;\n        this.postsUpdated.next({posts: [...this.posts], postCount: transformedPosts.maxPosts});\n      });\n  }\n\n  getPostUpdateListener() {\n    return this.postsUpdated.asObservable();\n  }\n\n  getPost(id: string) {\n    return this.http.get<{_id: string, title: string, content: string, imagePath: string, creator: string, course: string, university: string, author: string, messages: Array<Array<Message>>, startingPrice: number, minimumAllowedPrice: number, winner: string, date: Date, bought: boolean, bidders: Array<string> }>(BACKEND_URL+ \"/\" + id);\n  }\n\n  addPost(title: string, content: string, image: File, course: string, university: string, author: string, startingPrice: number, minimumAllowedPrice: number, date: Date) {\n    const postData = new FormData();\n    postData.append(\"title\", title);\n    postData.append(\"content\", content);\n    postData.append(\"image\", image, title);\n    postData.append(\"course\", course);\n    postData.append(\"university\", university);\n    postData.append(\"author\", author);\n    postData.append(\"startingPrice\", JSON.stringify(startingPrice));\n    postData.append(\"minimumAllowedPrice\", JSON.stringify(minimumAllowedPrice));\n    postData.append(\"winner\", null);\n    postData.append(\"date\", new Date(date).toISOString());\n    postData.append(\"bought\", JSON.stringify(false));\n    this.http\n    .post<{message: string, post: Post}>(BACKEND_URL,\n    postData)\n    .subscribe( (responseData) => {\n      this.router.navigate([\"/postList\"], {skipLocationChange: true});\n    });\n  }\n\n  updatePost(id: string, titleUpdated: string, contentUpdated: string, imageUpdated: File | string, courseUpdated: string, universityUpdated: string, authorUpdated: string, messages: Array<Array<Message>>, startingPrice: number, minimumAllowedPrice: number, winner: string, date: Date, bidders: Array<string>) {\n    let postData: Post | FormData;\n    if (typeof(imageUpdated) === 'object') {\n      postData = new FormData();\n      postData.append(\"id\", id);\n      postData.append(\"title\", titleUpdated);\n      postData.append(\"content\", contentUpdated);\n      postData.append(\"image\", imageUpdated, titleUpdated);\n      postData.append(\"course\", courseUpdated);\n      postData.append(\"university\", universityUpdated);\n      postData.append(\"author\", authorUpdated);\n      postData.append(\"messages\", JSON.stringify(messages));\n      postData.append(\"startingPrice\", JSON.stringify(startingPrice));\n      postData.append(\"minimumAllowedPrice\", JSON.stringify(minimumAllowedPrice));\n      postData.append(\"winner\", winner);\n      postData.append(\"date\", JSON.stringify(date));\n      postData.append(\"bought\", JSON.stringify(false));\n    } else {\n        postData =  {\n        id: id,\n        title: titleUpdated,\n        content: contentUpdated,\n        imagePath: imageUpdated,\n        creator: null,\n        course: courseUpdated,\n        university: universityUpdated,\n        author: authorUpdated,\n        messages: messages,\n        startingPrice: startingPrice,\n        minimumAllowedPrice: minimumAllowedPrice,\n        winner: winner,\n        date: date,\n        bought: false,\n        bidders: bidders\n      }\n    }\n    this.http.put(BACKEND_URL + \"/\" + id, postData)\n    .subscribe(response => {\n      this.router.navigate([\"/postList\"], {skipLocationChange: true});\n    })\n  }\n\n  updatePostMessage(id: string, titleUpdated: string, contentUpdated: string, imageUpdated: string, courseUpdated: string, universityUpdated: string, authorUpdated: string, messages: Array<Array<Message>>, startingPrice: number, minimumAllowedPrice: number, winner: string, date: Date, bidders: Array<string>) {\n    let postData: Post = {\n        id: id,\n        title: titleUpdated,\n        content: contentUpdated,\n        imagePath: imageUpdated,\n        creator: null,\n        course: courseUpdated,\n        university: universityUpdated,\n        author: authorUpdated,\n        messages: messages,\n        startingPrice: startingPrice,\n        minimumAllowedPrice: minimumAllowedPrice,\n        winner: winner,\n        date: date,\n        bought: false,\n        bidders: bidders\n      }\n    this.http.put(BACKEND_URL + \"/\" + id, postData)\n    .subscribe(response => {\n    })\n  }\n\n  updateBid(id: string, titleUpdated: string, contentUpdated: string, imageUpdated: string, courseUpdated: string, universityUpdated: string, authorUpdated: string, messages: Array<Array<Message>>, startingPrice: number, minimumAllowedPrice: number, winner: string, date: Date, bidders: Array<string>) {\n    let postData: Post = {\n        id: id,\n        title: titleUpdated,\n        content: contentUpdated,\n        imagePath: imageUpdated,\n        creator: null,\n        course: courseUpdated,\n        university: universityUpdated,\n        author: authorUpdated,\n        messages: messages,\n        startingPrice: startingPrice,\n        minimumAllowedPrice: minimumAllowedPrice,\n        winner: winner,\n        date: date,\n        bought: false,\n        bidders: bidders\n      }\n    this.http.put(BACKEND_URL + \"/\" + id, postData)\n    .subscribe(response => {\n    })\n  }\n\n\n  buyProduct(id: string, titleUpdated: string, contentUpdated: string, imageUpdated: string, courseUpdated: string, universityUpdated: string, authorUpdated: string, messages: Array<Array<Message>>, startingPrice: number, minimumAllowedPrice: number, winner: string, date: Date, bidders: Array<string>) {\n    let postData: Post = {\n      id: id,\n      title: titleUpdated,\n      content: contentUpdated,\n      imagePath: imageUpdated,\n      creator: null,\n      course: courseUpdated,\n      university: universityUpdated,\n      author: authorUpdated,\n      messages: messages,\n      startingPrice: startingPrice,\n      minimumAllowedPrice: minimumAllowedPrice,\n      winner: winner,\n      date: date,\n      bought: true,\n      bidders: bidders\n    }\n  this.http.put(BACKEND_URL + \"/\" + id, postData)\n  .subscribe(response => {\n  })\n  }\n\n\n  deletePost(postId: string) {\n    return this.http.delete(BACKEND_URL + \"/\" + postId)\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: \"http://nodejsangular-env.eba-upqyghfv.us-east-1.elasticbeanstalk.com/api\",\n  api: \"http://localhost:3000\"\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","/* (ignored) */"]}